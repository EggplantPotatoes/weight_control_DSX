
weight_control_open.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c80  08004c80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c80  08004c80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c80  08004c80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000010  08004c94  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004c94  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ff4b  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fd8  00000000  00000000  0002ffc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  00032fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c22  00000000  00000000  00033f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a17  00000000  00000000  00034b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014607  00000000  00000000  0004d599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c48f  00000000  00000000  00061ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003f94  00000000  00000000  000ee030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b3  00000000  00000000  000f1fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c3c 	.word	0x08004c3c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004c3c 	.word	0x08004c3c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <__aeabi_f2uiz>:
 8000654:	0042      	lsls	r2, r0, #1
 8000656:	d20e      	bcs.n	8000676 <__aeabi_f2uiz+0x22>
 8000658:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800065c:	d30b      	bcc.n	8000676 <__aeabi_f2uiz+0x22>
 800065e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000662:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000666:	d409      	bmi.n	800067c <__aeabi_f2uiz+0x28>
 8000668:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800066c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000670:	fa23 f002 	lsr.w	r0, r3, r2
 8000674:	4770      	bx	lr
 8000676:	f04f 0000 	mov.w	r0, #0
 800067a:	4770      	bx	lr
 800067c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000680:	d101      	bne.n	8000686 <__aeabi_f2uiz+0x32>
 8000682:	0242      	lsls	r2, r0, #9
 8000684:	d102      	bne.n	800068c <__aeabi_f2uiz+0x38>
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	4770      	bx	lr
 800068c:	f04f 0000 	mov.w	r0, #0
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0310 	add.w	r3, r7, #16
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a8:	4b2d      	ldr	r3, [pc, #180]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	4a2c      	ldr	r2, [pc, #176]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006ae:	f043 0320 	orr.w	r3, r3, #32
 80006b2:	6193      	str	r3, [r2, #24]
 80006b4:	4b2a      	ldr	r3, [pc, #168]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	f003 0320 	and.w	r3, r3, #32
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	4a26      	ldr	r2, [pc, #152]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006c6:	f043 0304 	orr.w	r3, r3, #4
 80006ca:	6193      	str	r3, [r2, #24]
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	f003 0304 	and.w	r3, r3, #4
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a20      	ldr	r2, [pc, #128]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_GPIO_Init+0xcc>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_CS_Pin|ADC_SCK_Pin|ADC_SDI_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	21b0      	movs	r1, #176	; 0xb0
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <MX_GPIO_Init+0xd0>)
 80006f6:	f001 f948 	bl	800198a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|TM1638_STB_Pin|TM1638_CLK_Pin
 80006fa:	2200      	movs	r2, #0
 80006fc:	f246 0138 	movw	r1, #24632	; 0x6038
 8000700:	4819      	ldr	r0, [pc, #100]	; (8000768 <MX_GPIO_Init+0xd4>)
 8000702:	f001 f942 	bl	800198a <HAL_GPIO_WritePin>
                          |TM1638_DIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ADC_CS_Pin|ADC_SCK_Pin|ADC_SDI_Pin;
 8000706:	23b0      	movs	r3, #176	; 0xb0
 8000708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0310 	add.w	r3, r7, #16
 800071a:	4619      	mov	r1, r3
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_GPIO_Init+0xd0>)
 800071e:	f000 ff99 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_SDO_Pin;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADC_SDO_GPIO_Port, &GPIO_InitStruct);
 800072e:	f107 0310 	add.w	r3, r7, #16
 8000732:	4619      	mov	r1, r3
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <MX_GPIO_Init+0xd0>)
 8000736:	f000 ff8d 	bl	8001654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|TM1638_STB_Pin|TM1638_CLK_Pin
 800073a:	f246 0338 	movw	r3, #24632	; 0x6038
 800073e:	613b      	str	r3, [r7, #16]
                          |TM1638_DIO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000740:	2301      	movs	r3, #1
 8000742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_GPIO_Init+0xd4>)
 8000754:	f000 ff7e 	bl	8001654 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	40010800 	.word	0x40010800
 8000768:	40010c00 	.word	0x40010c00

0800076c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x80>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d12b      	bne.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x6a>
  {
	  ADC.sample_flag = 1;
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000780:	2201      	movs	r2, #1
 8000782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  ADC.time_tick++;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000788:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800078a:	b29b      	uxth	r3, r3
 800078c:	3301      	adds	r3, #1
 800078e:	b29a      	uxth	r2, r3
 8000790:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000792:	875a      	strh	r2, [r3, #58]	; 0x3a
	  ADC.report_time_tick++;
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000796:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000798:	b29b      	uxth	r3, r3
 800079a:	3301      	adds	r3, #1
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007a0:	879a      	strh	r2, [r3, #60]	; 0x3c

	  if(ADC.report_time_tick>=1)
 80007a2:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007a4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80007a6:	b29b      	uxth	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d002      	beq.n	80007b2 <HAL_TIM_PeriodElapsedCallback+0x46>
	  {
		  ADC.report_time_tick = 0;
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	879a      	strh	r2, [r3, #60]	; 0x3c
	  }
	  if(ADC.time_tick>10)
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	2b0a      	cmp	r3, #10
 80007ba:	d90c      	bls.n	80007d6 <HAL_TIM_PeriodElapsedCallback+0x6a>
	  {
		  ADC.time_tick = 0;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80007be:	2200      	movs	r2, #0
 80007c0:	875a      	strh	r2, [r3, #58]	; 0x3a
		  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80007c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c6:	480b      	ldr	r0, [pc, #44]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007c8:	f001 f8f7 	bl	80019ba <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 80007cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80007d2:	f001 f8f2 	bl	80019ba <HAL_GPIO_TogglePin>
	  }
  }
  if (htim->Instance == TIM2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007de:	d101      	bne.n	80007e4 <HAL_TIM_PeriodElapsedCallback+0x78>
  {
	  modbus_timeout();
 80007e0:	f003 ff12 	bl	8004608 <modbus_timeout>
  }

}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40000400 	.word	0x40000400
 80007f0:	20000170 	.word	0x20000170
 80007f4:	40010c00 	.word	0x40010c00

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fae4 	bl	8000dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f824 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff ff46 	bl	8000694 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000808:	f000 f8f2 	bl	80009f0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800080c:	f000 f9ca 	bl	8000ba4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000810:	f000 f93a 	bl	8000a88 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000814:	f000 f9f0 	bl	8000bf8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);//上电等待系统问稳定
 8000818:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800081c:	f000 fb36 	bl	8000e8c <HAL_Delay>
  ADC_init();
 8000820:	f003 f834 	bl	800388c <ADC_init>
  modbus_uart_init();
 8000824:	f004 f8f6 	bl	8004a14 <modbus_uart_init>
  modbus_init();
 8000828:	f003 ff14 	bl	8004654 <modbus_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(ADC.sample_flag==1)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <main+0x50>)
 800082e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b01      	cmp	r3, #1
 8000836:	d1f9      	bne.n	800082c <main+0x34>
	  {
		  ADC_read_value();
 8000838:	f003 f84c 	bl	80038d4 <ADC_read_value>
		  ADC.sample_flag = 0;
 800083c:	4b02      	ldr	r3, [pc, #8]	; (8000848 <main+0x50>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	  if(ADC.sample_flag==1)
 8000844:	e7f2      	b.n	800082c <main+0x34>
 8000846:	bf00      	nop
 8000848:	20000170 	.word	0x20000170

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b090      	sub	sp, #64	; 0x40
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 f9c2 	bl	8004be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800087c:	2301      	movs	r3, #1
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800088a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800088e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f8a9 	bl	80019ec <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008a0:	f000 f819 	bl	80008d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a8:	2302      	movs	r3, #2
 80008aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2102      	movs	r1, #2
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fb16 	bl	8001ef0 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008ca:	f000 f804 	bl	80008d6 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3740      	adds	r7, #64	; 0x40
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008da:	b672      	cpsid	i
}
 80008dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008de:	e7fe      	b.n	80008de <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_MspInit+0x5c>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <HAL_MspInit+0x5c>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_MspInit+0x5c>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <HAL_MspInit+0x5c>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a0e      	ldr	r2, [pc, #56]	; (800093c <HAL_MspInit+0x5c>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <HAL_MspInit+0x5c>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_MspInit+0x60>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_MspInit+0x60>)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000
 8000940:	40010000 	.word	0x40010000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr

0800096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr

08000986 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000986:	b580      	push	{r7, lr}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098a:	f000 fa63 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <TIM2_IRQHandler+0x10>)
 800099a:	f001 fcd9 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000002c 	.word	0x2000002c

080009a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM3_IRQHandler+0x10>)
 80009ae:	f001 fccf 	bl	8002350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000074 	.word	0x20000074

080009bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c0:	4802      	ldr	r0, [pc, #8]	; (80009cc <USART1_IRQHandler+0x10>)
 80009c2:	f002 f919 	bl	8002bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200000bc 	.word	0x200000bc

080009d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009d4:	4802      	ldr	r0, [pc, #8]	; (80009e0 <USART3_IRQHandler+0x10>)
 80009d6:	f002 f90f 	bl	8002bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000104 	.word	0x20000104

080009e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a16:	2247      	movs	r2, #71	; 0x47
 8000a18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a22:	2263      	movs	r2, #99	; 0x63
 8000a24:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a32:	4814      	ldr	r0, [pc, #80]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a34:	f001 fbea 	bl	800220c <HAL_TIM_Base_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f7ff ff4a 	bl	80008d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a48:	f107 0308 	add.w	r3, r7, #8
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a50:	f001 fd86 	bl	8002560 <HAL_TIM_ConfigClockSource>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f7ff ff3c 	bl	80008d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4806      	ldr	r0, [pc, #24]	; (8000a84 <MX_TIM2_Init+0x94>)
 8000a6c:	f001 ff5c 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000a76:	f7ff ff2e 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	2000002c 	.word	0x2000002c

08000a88 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <MX_TIM3_Init+0x98>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000aac:	2247      	movs	r2, #71	; 0x47
 8000aae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000ab8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000abc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000ac6:	2280      	movs	r2, #128	; 0x80
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000acc:	f001 fb9e 	bl	800220c <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f7ff fefe 	bl	80008d6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000ae8:	f001 fd3a 	bl	8002560 <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000af2:	f7ff fef0 	bl	80008d6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_TIM3_Init+0x94>)
 8000b04:	f001 ff10 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b0e:	f7ff fee2 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3718      	adds	r7, #24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000074 	.word	0x20000074
 8000b20:	40000400 	.word	0x40000400

08000b24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b34:	d114      	bne.n	8000b60 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <HAL_TIM_Base_MspInit+0x78>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_TIM_Base_MspInit+0x78>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	61d3      	str	r3, [r2, #28]
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <HAL_TIM_Base_MspInit+0x78>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	201c      	movs	r0, #28
 8000b54:	f000 fa95 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b58:	201c      	movs	r0, #28
 8000b5a:	f000 faae 	bl	80010ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000b5e:	e018      	b.n	8000b92 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <HAL_TIM_Base_MspInit+0x7c>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d113      	bne.n	8000b92 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_TIM_Base_MspInit+0x78>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_TIM_Base_MspInit+0x78>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	61d3      	str	r3, [r2, #28]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_TIM_Base_MspInit+0x78>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60bb      	str	r3, [r7, #8]
 8000b80:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	201d      	movs	r0, #29
 8000b88:	f000 fa7b 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b8c:	201d      	movs	r0, #29
 8000b8e:	f000 fa94 	bl	80010ba <HAL_NVIC_EnableIRQ>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40000400 	.word	0x40000400

08000ba4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_USART1_UART_Init+0x50>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART1_UART_Init+0x4c>)
 8000bdc:	f001 ff14 	bl	8002a08 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000be6:	f7ff fe76 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000bc 	.word	0x200000bc
 8000bf4:	40013800 	.word	0x40013800

08000bf8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <MX_USART3_UART_Init+0x50>)
 8000c00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c1e:	220c      	movs	r2, #12
 8000c20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_USART3_UART_Init+0x4c>)
 8000c30:	f001 feea 	bl	8002a08 <HAL_UART_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c3a:	f7ff fe4c 	bl	80008d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000104 	.word	0x20000104
 8000c48:	40004800 	.word	0x40004800

08000c4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a40      	ldr	r2, [pc, #256]	; (8000d68 <HAL_UART_MspInit+0x11c>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d13a      	bne.n	8000ce2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6c:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	4a3e      	ldr	r2, [pc, #248]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	6193      	str	r3, [r2, #24]
 8000c78:	4b3c      	ldr	r3, [pc, #240]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000c7a:	699b      	ldr	r3, [r3, #24]
 8000c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c84:	4b39      	ldr	r3, [pc, #228]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a38      	ldr	r2, [pc, #224]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b36      	ldr	r3, [pc, #216]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	482f      	ldr	r0, [pc, #188]	; (8000d70 <HAL_UART_MspInit+0x124>)
 8000cb2:	f000 fccf 	bl	8001654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0318 	add.w	r3, r7, #24
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4829      	ldr	r0, [pc, #164]	; (8000d70 <HAL_UART_MspInit+0x124>)
 8000ccc:	f000 fcc2 	bl	8001654 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2025      	movs	r0, #37	; 0x25
 8000cd6:	f000 f9d4 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cda:	2025      	movs	r0, #37	; 0x25
 8000cdc:	f000 f9ed 	bl	80010ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ce0:	e03e      	b.n	8000d60 <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_UART_MspInit+0x128>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d139      	bne.n	8000d60 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000cf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf6:	61d3      	str	r3, [r2, #28]
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a18      	ldr	r2, [pc, #96]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <HAL_UART_MspInit+0x120>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4811      	ldr	r0, [pc, #68]	; (8000d78 <HAL_UART_MspInit+0x12c>)
 8000d32:	f000 fc8f 	bl	8001654 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 0318 	add.w	r3, r7, #24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_UART_MspInit+0x12c>)
 8000d4c:	f000 fc82 	bl	8001654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2027      	movs	r0, #39	; 0x27
 8000d56:	f000 f994 	bl	8001082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d5a:	2027      	movs	r0, #39	; 0x27
 8000d5c:	f000 f9ad 	bl	80010ba <HAL_NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	; 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40013800 	.word	0x40013800
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010800 	.word	0x40010800
 8000d74:	40004800 	.word	0x40004800
 8000d78:	40010c00 	.word	0x40010c00

08000d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff fe32 	bl	80009e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d82:	490c      	ldr	r1, [pc, #48]	; (8000db4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d84:	4a0c      	ldr	r2, [pc, #48]	; (8000db8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d98:	4c09      	ldr	r4, [pc, #36]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 ff25 	bl	8004bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000daa:	f7ff fd25 	bl	80007f8 <main>
  bx lr
 8000dae:	4770      	bx	lr
  ldr r0, =_sdata
 8000db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db8:	08004c88 	.word	0x08004c88
  ldr r2, =_sbss
 8000dbc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000dc0:	200002b8 	.word	0x200002b8

08000dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc4:	e7fe      	b.n	8000dc4 <ADC1_2_IRQHandler>
	...

08000dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x28>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x28>)
 8000dd2:	f043 0310 	orr.w	r3, r3, #16
 8000dd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f947 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fd7c 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40022000 	.word	0x40022000

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f95f 	bl	80010d6 <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f927 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x1c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_IncTick+0x20>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a03      	ldr	r2, [pc, #12]	; (8000e74 <HAL_IncTick+0x20>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000008 	.word	0x20000008
 8000e74:	2000014c 	.word	0x2000014c

08000e78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b02      	ldr	r3, [pc, #8]	; (8000e88 <HAL_GetTick+0x10>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	2000014c 	.word	0x2000014c

08000e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e94:	f7ff fff0 	bl	8000e78 <HAL_GetTick>
 8000e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea4:	d005      	beq.n	8000eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ea6:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <HAL_Delay+0x44>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4413      	add	r3, r2
 8000eb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb2:	bf00      	nop
 8000eb4:	f7ff ffe0 	bl	8000e78 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d8f7      	bhi.n	8000eb4 <HAL_Delay+0x28>
  {
  }
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <__NVIC_EnableIRQ+0x34>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff90 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff2d 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff42 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff35 	bl	8000f38 <__NVIC_EnableIRQ>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff ffa2 	bl	8001028 <SysTick_Config>
 80010e4:	4603      	mov	r3, r0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b085      	sub	sp, #20
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d008      	beq.n	8001118 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2204      	movs	r2, #4
 800110a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e020      	b.n	800115a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 020e 	bic.w	r2, r2, #14
 8001126:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001140:	2101      	movs	r1, #1
 8001142:	fa01 f202 	lsl.w	r2, r1, r2
 8001146:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2201      	movs	r2, #1
 800114c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2200      	movs	r2, #0
 8001154:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d005      	beq.n	8001188 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2204      	movs	r2, #4
 8001180:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	73fb      	strb	r3, [r7, #15]
 8001186:	e051      	b.n	800122c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 020e 	bic.w	r2, r2, #14
 8001196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f022 0201 	bic.w	r2, r2, #1
 80011a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a22      	ldr	r2, [pc, #136]	; (8001238 <HAL_DMA_Abort_IT+0xd4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d029      	beq.n	8001206 <HAL_DMA_Abort_IT+0xa2>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a21      	ldr	r2, [pc, #132]	; (800123c <HAL_DMA_Abort_IT+0xd8>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d022      	beq.n	8001202 <HAL_DMA_Abort_IT+0x9e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <HAL_DMA_Abort_IT+0xdc>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01a      	beq.n	80011fc <HAL_DMA_Abort_IT+0x98>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a1e      	ldr	r2, [pc, #120]	; (8001244 <HAL_DMA_Abort_IT+0xe0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d012      	beq.n	80011f6 <HAL_DMA_Abort_IT+0x92>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <HAL_DMA_Abort_IT+0xe4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00a      	beq.n	80011f0 <HAL_DMA_Abort_IT+0x8c>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_DMA_Abort_IT+0xe8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d102      	bne.n	80011ea <HAL_DMA_Abort_IT+0x86>
 80011e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011e8:	e00e      	b.n	8001208 <HAL_DMA_Abort_IT+0xa4>
 80011ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011ee:	e00b      	b.n	8001208 <HAL_DMA_Abort_IT+0xa4>
 80011f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f4:	e008      	b.n	8001208 <HAL_DMA_Abort_IT+0xa4>
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	e005      	b.n	8001208 <HAL_DMA_Abort_IT+0xa4>
 80011fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001200:	e002      	b.n	8001208 <HAL_DMA_Abort_IT+0xa4>
 8001202:	2310      	movs	r3, #16
 8001204:	e000      	b.n	8001208 <HAL_DMA_Abort_IT+0xa4>
 8001206:	2301      	movs	r3, #1
 8001208:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_DMA_Abort_IT+0xec>)
 800120a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
    } 
  }
  return status;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020008 	.word	0x40020008
 800123c:	4002001c 	.word	0x4002001c
 8001240:	40020030 	.word	0x40020030
 8001244:	40020044 	.word	0x40020044
 8001248:	40020058 	.word	0x40020058
 800124c:	4002006c 	.word	0x4002006c
 8001250:	40020000 	.word	0x40020000

08001254 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800126e:	4b2f      	ldr	r3, [pc, #188]	; (800132c <HAL_FLASH_Program+0xd8>)
 8001270:	7e1b      	ldrb	r3, [r3, #24]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_FLASH_Program+0x26>
 8001276:	2302      	movs	r3, #2
 8001278:	e054      	b.n	8001324 <HAL_FLASH_Program+0xd0>
 800127a:	4b2c      	ldr	r3, [pc, #176]	; (800132c <HAL_FLASH_Program+0xd8>)
 800127c:	2201      	movs	r2, #1
 800127e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001280:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001284:	f000 f8a8 	bl	80013d8 <FLASH_WaitForLastOperation>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d144      	bne.n	800131c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d102      	bne.n	800129e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001298:	2301      	movs	r3, #1
 800129a:	757b      	strb	r3, [r7, #21]
 800129c:	e007      	b.n	80012ae <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d102      	bne.n	80012aa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80012a4:	2302      	movs	r3, #2
 80012a6:	757b      	strb	r3, [r7, #21]
 80012a8:	e001      	b.n	80012ae <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80012aa:	2304      	movs	r3, #4
 80012ac:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	75bb      	strb	r3, [r7, #22]
 80012b2:	e02d      	b.n	8001310 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80012b4:	7dbb      	ldrb	r3, [r7, #22]
 80012b6:	005a      	lsls	r2, r3, #1
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	eb02 0c03 	add.w	ip, r2, r3
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	0119      	lsls	r1, r3, #4
 80012c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012c6:	f1c1 0620 	rsb	r6, r1, #32
 80012ca:	f1a1 0020 	sub.w	r0, r1, #32
 80012ce:	fa22 f401 	lsr.w	r4, r2, r1
 80012d2:	fa03 f606 	lsl.w	r6, r3, r6
 80012d6:	4334      	orrs	r4, r6
 80012d8:	fa23 f000 	lsr.w	r0, r3, r0
 80012dc:	4304      	orrs	r4, r0
 80012de:	fa23 f501 	lsr.w	r5, r3, r1
 80012e2:	b2a3      	uxth	r3, r4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4660      	mov	r0, ip
 80012e8:	f000 f85a 	bl	80013a0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012f0:	f000 f872 	bl	80013d8 <FLASH_WaitForLastOperation>
 80012f4:	4603      	mov	r3, r0
 80012f6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_FLASH_Program+0xdc>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_FLASH_Program+0xdc>)
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d107      	bne.n	800131a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800130a:	7dbb      	ldrb	r3, [r7, #22]
 800130c:	3301      	adds	r3, #1
 800130e:	75bb      	strb	r3, [r7, #22]
 8001310:	7dba      	ldrb	r2, [r7, #22]
 8001312:	7d7b      	ldrb	r3, [r7, #21]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3cd      	bcc.n	80012b4 <HAL_FLASH_Program+0x60>
 8001318:	e000      	b.n	800131c <HAL_FLASH_Program+0xc8>
      {
        break;
 800131a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_FLASH_Program+0xd8>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]

  return status;
 8001322:	7dfb      	ldrb	r3, [r7, #23]
}
 8001324:	4618      	mov	r0, r3
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132c:	20000150 	.word	0x20000150
 8001330:	40022000 	.word	0x40022000

08001334 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <HAL_FLASH_Unlock+0x40>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001346:	2b00      	cmp	r3, #0
 8001348:	d00d      	beq.n	8001366 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_FLASH_Unlock+0x40>)
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_FLASH_Unlock+0x44>)
 800134e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_FLASH_Unlock+0x40>)
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_FLASH_Unlock+0x48>)
 8001354:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_FLASH_Unlock+0x40>)
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001366:	79fb      	ldrb	r3, [r7, #7]
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000
 8001378:	45670123 	.word	0x45670123
 800137c:	cdef89ab 	.word	0xcdef89ab

08001380 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_FLASH_Lock+0x1c>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_FLASH_Lock+0x1c>)
 800138a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40022000 	.word	0x40022000

080013a0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013ac:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <FLASH_Program_HalfWord+0x30>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <FLASH_Program_HalfWord+0x34>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <FLASH_Program_HalfWord+0x34>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	801a      	strh	r2, [r3, #0]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000150 	.word	0x20000150
 80013d4:	40022000 	.word	0x40022000

080013d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff fd4a 	bl	8000e78 <HAL_GetTick>
 80013e4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013e6:	e010      	b.n	800140a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ee:	d00c      	beq.n	800140a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <FLASH_WaitForLastOperation+0x2e>
 80013f6:	f7ff fd3f 	bl	8000e78 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	d201      	bcs.n	800140a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e025      	b.n	8001456 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <FLASH_WaitForLastOperation+0x88>)
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1e8      	bne.n	80013e8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001416:	4b12      	ldr	r3, [pc, #72]	; (8001460 <FLASH_WaitForLastOperation+0x88>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f003 0320 	and.w	r3, r3, #32
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <FLASH_WaitForLastOperation+0x88>)
 8001424:	2220      	movs	r2, #32
 8001426:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <FLASH_WaitForLastOperation+0x88>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	2b00      	cmp	r3, #0
 8001432:	d10b      	bne.n	800144c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <FLASH_WaitForLastOperation+0x88>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800143c:	2b00      	cmp	r3, #0
 800143e:	d105      	bne.n	800144c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <FLASH_WaitForLastOperation+0x88>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800144c:	f000 f80a 	bl	8001464 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000

08001464 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800146e:	4b23      	ldr	r3, [pc, #140]	; (80014fc <FLASH_SetErrorCode+0x98>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	f003 0310 	and.w	r3, r3, #16
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800147a:	4b21      	ldr	r3, [pc, #132]	; (8001500 <FLASH_SetErrorCode+0x9c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f043 0302 	orr.w	r3, r3, #2
 8001482:	4a1f      	ldr	r2, [pc, #124]	; (8001500 <FLASH_SetErrorCode+0x9c>)
 8001484:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <FLASH_SetErrorCode+0x98>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d009      	beq.n	80014ae <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800149a:	4b19      	ldr	r3, [pc, #100]	; (8001500 <FLASH_SetErrorCode+0x9c>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	4a17      	ldr	r2, [pc, #92]	; (8001500 <FLASH_SetErrorCode+0x9c>)
 80014a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80014ae:	4b13      	ldr	r3, [pc, #76]	; (80014fc <FLASH_SetErrorCode+0x98>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <FLASH_SetErrorCode+0x9c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <FLASH_SetErrorCode+0x9c>)
 80014c4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <FLASH_SetErrorCode+0x98>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <FLASH_SetErrorCode+0x98>)
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f240 1201 	movw	r2, #257	; 0x101
 80014d8:	4293      	cmp	r3, r2
 80014da:	d106      	bne.n	80014ea <FLASH_SetErrorCode+0x86>
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <FLASH_SetErrorCode+0x98>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <FLASH_SetErrorCode+0x98>)
 80014e2:	f023 0301 	bic.w	r3, r3, #1
 80014e6:	61d3      	str	r3, [r2, #28]
}  
 80014e8:	e002      	b.n	80014f0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014ea:	4a04      	ldr	r2, [pc, #16]	; (80014fc <FLASH_SetErrorCode+0x98>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60d3      	str	r3, [r2, #12]
}  
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000
 8001500:	20000150 	.word	0x20000150

08001504 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_FLASHEx_Erase+0xd0>)
 8001518:	7e1b      	ldrb	r3, [r3, #24]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d101      	bne.n	8001522 <HAL_FLASHEx_Erase+0x1e>
 800151e:	2302      	movs	r3, #2
 8001520:	e053      	b.n	80015ca <HAL_FLASHEx_Erase+0xc6>
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_FLASHEx_Erase+0xd0>)
 8001524:	2201      	movs	r2, #1
 8001526:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d116      	bne.n	800155e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001530:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001534:	f7ff ff50 	bl	80013d8 <FLASH_WaitForLastOperation>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d141      	bne.n	80015c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800153e:	2001      	movs	r0, #1
 8001540:	f000 f84c 	bl	80015dc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001544:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001548:	f7ff ff46 	bl	80013d8 <FLASH_WaitForLastOperation>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_FLASHEx_Erase+0xd4>)
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_FLASHEx_Erase+0xd4>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6113      	str	r3, [r2, #16]
 800155c:	e031      	b.n	80015c2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800155e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001562:	f7ff ff39 	bl	80013d8 <FLASH_WaitForLastOperation>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d12a      	bne.n	80015c2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f04f 32ff 	mov.w	r2, #4294967295
 8001572:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	e019      	b.n	80015b0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f000 f849 	bl	8001614 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001582:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001586:	f7ff ff27 	bl	80013d8 <FLASH_WaitForLastOperation>
 800158a:	4603      	mov	r3, r0
 800158c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_FLASHEx_Erase+0xd4>)
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_FLASHEx_Erase+0xd4>)
 8001594:	f023 0302 	bic.w	r3, r3, #2
 8001598:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d003      	beq.n	80015a8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	601a      	str	r2, [r3, #0]
            break;
 80015a6:	e00c      	b.n	80015c2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ae:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	029a      	lsls	r2, r3, #10
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	4413      	add	r3, r2
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d3dc      	bcc.n	800157c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015c2:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <HAL_FLASHEx_Erase+0xd0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	761a      	strb	r2, [r3, #24]

  return status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000150 	.word	0x20000150
 80015d8:	40022000 	.word	0x40022000

080015dc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015e4:	4b09      	ldr	r3, [pc, #36]	; (800160c <FLASH_MassErase+0x30>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <FLASH_MassErase+0x34>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <FLASH_MassErase+0x34>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <FLASH_MassErase+0x34>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <FLASH_MassErase+0x34>)
 80015fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001600:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	20000150 	.word	0x20000150
 8001610:	40022000 	.word	0x40022000

08001614 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <FLASH_PageErase+0x38>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <FLASH_PageErase+0x3c>)
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <FLASH_PageErase+0x3c>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <FLASH_PageErase+0x3c>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <FLASH_PageErase+0x3c>)
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4a05      	ldr	r2, [pc, #20]	; (8001650 <FLASH_PageErase+0x3c>)
 800163a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800163e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000150 	.word	0x20000150
 8001650:	40022000 	.word	0x40022000

08001654 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001654:	b480      	push	{r7}
 8001656:	b08b      	sub	sp, #44	; 0x2c
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165e:	2300      	movs	r3, #0
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001666:	e169      	b.n	800193c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001668:	2201      	movs	r2, #1
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	429a      	cmp	r2, r3
 8001682:	f040 8158 	bne.w	8001936 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4a9a      	ldr	r2, [pc, #616]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d05e      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 8001690:	4a98      	ldr	r2, [pc, #608]	; (80018f4 <HAL_GPIO_Init+0x2a0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d875      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 8001696:	4a98      	ldr	r2, [pc, #608]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d058      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 800169c:	4a96      	ldr	r2, [pc, #600]	; (80018f8 <HAL_GPIO_Init+0x2a4>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d86f      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016a2:	4a96      	ldr	r2, [pc, #600]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d052      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016a8:	4a94      	ldr	r2, [pc, #592]	; (80018fc <HAL_GPIO_Init+0x2a8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d869      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ae:	4a94      	ldr	r2, [pc, #592]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d04c      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016b4:	4a92      	ldr	r2, [pc, #584]	; (8001900 <HAL_GPIO_Init+0x2ac>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d863      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ba:	4a92      	ldr	r2, [pc, #584]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d046      	beq.n	800174e <HAL_GPIO_Init+0xfa>
 80016c0:	4a90      	ldr	r2, [pc, #576]	; (8001904 <HAL_GPIO_Init+0x2b0>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d85d      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016c6:	2b12      	cmp	r3, #18
 80016c8:	d82a      	bhi.n	8001720 <HAL_GPIO_Init+0xcc>
 80016ca:	2b12      	cmp	r3, #18
 80016cc:	d859      	bhi.n	8001782 <HAL_GPIO_Init+0x12e>
 80016ce:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <HAL_GPIO_Init+0x80>)
 80016d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d4:	0800174f 	.word	0x0800174f
 80016d8:	08001729 	.word	0x08001729
 80016dc:	0800173b 	.word	0x0800173b
 80016e0:	0800177d 	.word	0x0800177d
 80016e4:	08001783 	.word	0x08001783
 80016e8:	08001783 	.word	0x08001783
 80016ec:	08001783 	.word	0x08001783
 80016f0:	08001783 	.word	0x08001783
 80016f4:	08001783 	.word	0x08001783
 80016f8:	08001783 	.word	0x08001783
 80016fc:	08001783 	.word	0x08001783
 8001700:	08001783 	.word	0x08001783
 8001704:	08001783 	.word	0x08001783
 8001708:	08001783 	.word	0x08001783
 800170c:	08001783 	.word	0x08001783
 8001710:	08001783 	.word	0x08001783
 8001714:	08001783 	.word	0x08001783
 8001718:	08001731 	.word	0x08001731
 800171c:	08001745 	.word	0x08001745
 8001720:	4a79      	ldr	r2, [pc, #484]	; (8001908 <HAL_GPIO_Init+0x2b4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d013      	beq.n	800174e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001726:	e02c      	b.n	8001782 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e029      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	3304      	adds	r3, #4
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e024      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	3308      	adds	r3, #8
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e01f      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	330c      	adds	r3, #12
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e01a      	b.n	8001784 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001756:	2304      	movs	r3, #4
 8001758:	623b      	str	r3, [r7, #32]
          break;
 800175a:	e013      	b.n	8001784 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69fa      	ldr	r2, [r7, #28]
 800176c:	611a      	str	r2, [r3, #16]
          break;
 800176e:	e009      	b.n	8001784 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001770:	2308      	movs	r3, #8
 8001772:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	615a      	str	r2, [r3, #20]
          break;
 800177a:	e003      	b.n	8001784 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e000      	b.n	8001784 <HAL_GPIO_Init+0x130>
          break;
 8001782:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d801      	bhi.n	800178e <HAL_GPIO_Init+0x13a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_Init+0x13e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3304      	adds	r3, #4
 8001792:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2bff      	cmp	r3, #255	; 0xff
 8001798:	d802      	bhi.n	80017a0 <HAL_GPIO_Init+0x14c>
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	e002      	b.n	80017a6 <HAL_GPIO_Init+0x152>
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	3b08      	subs	r3, #8
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	210f      	movs	r1, #15
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	401a      	ands	r2, r3
 80017b8:	6a39      	ldr	r1, [r7, #32]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	fa01 f303 	lsl.w	r3, r1, r3
 80017c0:	431a      	orrs	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80b1 	beq.w	8001936 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a4c      	ldr	r2, [pc, #304]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b4a      	ldr	r3, [pc, #296]	; (800190c <HAL_GPIO_Init+0x2b8>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	3302      	adds	r3, #2
 80017f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a40      	ldr	r2, [pc, #256]	; (8001914 <HAL_GPIO_Init+0x2c0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1ec>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a3f      	ldr	r2, [pc, #252]	; (8001918 <HAL_GPIO_Init+0x2c4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1e8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a3e      	ldr	r2, [pc, #248]	; (800191c <HAL_GPIO_Init+0x2c8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1e4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a3d      	ldr	r2, [pc, #244]	; (8001920 <HAL_GPIO_Init+0x2cc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1e0>
 8001830:	2303      	movs	r3, #3
 8001832:	e006      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001834:	2304      	movs	r3, #4
 8001836:	e004      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001838:	2302      	movs	r3, #2
 800183a:	e002      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_GPIO_Init+0x1ee>
 8001840:	2300      	movs	r3, #0
 8001842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001844:	f002 0203 	and.w	r2, r2, #3
 8001848:	0092      	lsls	r2, r2, #2
 800184a:	4093      	lsls	r3, r2
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001852:	492f      	ldr	r1, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2bc>)
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d006      	beq.n	800187a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	492c      	ldr	r1, [pc, #176]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
 8001878:	e006      	b.n	8001888 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800187a:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	43db      	mvns	r3, r3
 8001882:	4928      	ldr	r1, [pc, #160]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001884:	4013      	ands	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 8001896:	68da      	ldr	r2, [r3, #12]
 8001898:	4922      	ldr	r1, [pc, #136]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	60cb      	str	r3, [r1, #12]
 80018a0:	e006      	b.n	80018b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	491e      	ldr	r1, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	4918      	ldr	r1, [pc, #96]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4914      	ldr	r1, [pc, #80]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4013      	ands	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d021      	beq.n	8001928 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	490e      	ldr	r1, [pc, #56]	; (8001924 <HAL_GPIO_Init+0x2d0>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
 80018f0:	e021      	b.n	8001936 <HAL_GPIO_Init+0x2e2>
 80018f2:	bf00      	nop
 80018f4:	10320000 	.word	0x10320000
 80018f8:	10310000 	.word	0x10310000
 80018fc:	10220000 	.word	0x10220000
 8001900:	10210000 	.word	0x10210000
 8001904:	10120000 	.word	0x10120000
 8001908:	10110000 	.word	0x10110000
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	40010800 	.word	0x40010800
 8001918:	40010c00 	.word	0x40010c00
 800191c:	40011000 	.word	0x40011000
 8001920:	40011400 	.word	0x40011400
 8001924:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_GPIO_Init+0x304>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	43db      	mvns	r3, r3
 8001930:	4909      	ldr	r1, [pc, #36]	; (8001958 <HAL_GPIO_Init+0x304>)
 8001932:	4013      	ands	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	3301      	adds	r3, #1
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f ae8e 	bne.w	8001668 <HAL_GPIO_Init+0x14>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	372c      	adds	r7, #44	; 0x2c
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e001      	b.n	800197e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
 8001996:	4613      	mov	r3, r2
 8001998:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199a:	787b      	ldrb	r3, [r7, #1]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	611a      	str	r2, [r3, #16]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	041a      	lsls	r2, r3, #16
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	400b      	ands	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	611a      	str	r2, [r3, #16]
}
 80019e2:	bf00      	nop
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e272      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 8087 	beq.w	8001b1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a0c:	4b92      	ldr	r3, [pc, #584]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b04      	cmp	r3, #4
 8001a16:	d00c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a18:	4b8f      	ldr	r3, [pc, #572]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d112      	bne.n	8001a4a <HAL_RCC_OscConfig+0x5e>
 8001a24:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a30:	d10b      	bne.n	8001a4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a32:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d06c      	beq.n	8001b18 <HAL_RCC_OscConfig+0x12c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d168      	bne.n	8001b18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e24c      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x76>
 8001a54:	4b80      	ldr	r3, [pc, #512]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a7f      	ldr	r2, [pc, #508]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	e02e      	b.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x98>
 8001a6a:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a7a      	ldr	r2, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a77      	ldr	r2, [pc, #476]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e01d      	b.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xbc>
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a71      	ldr	r2, [pc, #452]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a6e      	ldr	r2, [pc, #440]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e00b      	b.n	8001ac0 <HAL_RCC_OscConfig+0xd4>
 8001aa8:	4b6b      	ldr	r3, [pc, #428]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a67      	ldr	r2, [pc, #412]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001abe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d013      	beq.n	8001af0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac8:	f7ff f9d6 	bl	8000e78 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff f9d2 	bl	8000e78 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	; 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e200      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0xe4>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff f9c2 	bl	8000e78 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af8:	f7ff f9be 	bl	8000e78 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b64      	cmp	r3, #100	; 0x64
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1ec      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0a:	4b53      	ldr	r3, [pc, #332]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x10c>
 8001b16:	e000      	b.n	8001b1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d063      	beq.n	8001bee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b26:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b32:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d11c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x18c>
 8001b3e:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d116      	bne.n	8001b78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d005      	beq.n	8001b62 <HAL_RCC_OscConfig+0x176>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d001      	beq.n	8001b62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e1c0      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4939      	ldr	r1, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b76:	e03a      	b.n	8001bee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d020      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b86:	f7ff f977 	bl	8000e78 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8e:	f7ff f973 	bl	8000e78 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e1a1      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4927      	ldr	r1, [pc, #156]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
 8001bc0:	e015      	b.n	8001bee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <HAL_RCC_OscConfig+0x270>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff f956 	bl	8000e78 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd0:	f7ff f952 	bl	8000e78 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e180      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d03a      	beq.n	8001c70 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d019      	beq.n	8001c36 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7ff f936 	bl	8000e78 <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c10:	f7ff f932 	bl	8000e78 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e160      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0f0      	beq.n	8001c10 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c2e:	2001      	movs	r0, #1
 8001c30:	f000 face 	bl	80021d0 <RCC_Delay>
 8001c34:	e01c      	b.n	8001c70 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_RCC_OscConfig+0x274>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3c:	f7ff f91c 	bl	8000e78 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c42:	e00f      	b.n	8001c64 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c44:	f7ff f918 	bl	8000e78 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d908      	bls.n	8001c64 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e146      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	42420000 	.word	0x42420000
 8001c60:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c64:	4b92      	ldr	r3, [pc, #584]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1e9      	bne.n	8001c44 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80a6 	beq.w	8001dca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c82:	4b8b      	ldr	r3, [pc, #556]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10d      	bne.n	8001caa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b88      	ldr	r3, [pc, #544]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4a87      	ldr	r2, [pc, #540]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	61d3      	str	r3, [r2, #28]
 8001c9a:	4b85      	ldr	r3, [pc, #532]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001caa:	4b82      	ldr	r3, [pc, #520]	; (8001eb4 <HAL_RCC_OscConfig+0x4c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d118      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cb6:	4b7f      	ldr	r3, [pc, #508]	; (8001eb4 <HAL_RCC_OscConfig+0x4c8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7e      	ldr	r2, [pc, #504]	; (8001eb4 <HAL_RCC_OscConfig+0x4c8>)
 8001cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f8d9 	bl	8000e78 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cca:	f7ff f8d5 	bl	8000e78 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	; 0x64
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e103      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b75      	ldr	r3, [pc, #468]	; (8001eb4 <HAL_RCC_OscConfig+0x4c8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0f0      	beq.n	8001cca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x312>
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	4a6e      	ldr	r2, [pc, #440]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6213      	str	r3, [r2, #32]
 8001cfc:	e02d      	b.n	8001d5a <HAL_RCC_OscConfig+0x36e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x334>
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a69      	ldr	r2, [pc, #420]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a66      	ldr	r2, [pc, #408]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	e01c      	b.n	8001d5a <HAL_RCC_OscConfig+0x36e>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b05      	cmp	r3, #5
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x356>
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a60      	ldr	r2, [pc, #384]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	4b5e      	ldr	r3, [pc, #376]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4a5d      	ldr	r2, [pc, #372]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6213      	str	r3, [r2, #32]
 8001d40:	e00b      	b.n	8001d5a <HAL_RCC_OscConfig+0x36e>
 8001d42:	4b5b      	ldr	r3, [pc, #364]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a5a      	ldr	r2, [pc, #360]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	6213      	str	r3, [r2, #32]
 8001d4e:	4b58      	ldr	r3, [pc, #352]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	f023 0304 	bic.w	r3, r3, #4
 8001d58:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d015      	beq.n	8001d8e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff f889 	bl	8000e78 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff f885 	bl	8000e78 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e0b1      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d80:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0ee      	beq.n	8001d6a <HAL_RCC_OscConfig+0x37e>
 8001d8c:	e014      	b.n	8001db8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff f873 	bl	8000e78 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d96:	f7ff f86f 	bl	8000e78 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e09b      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001db8:	7dfb      	ldrb	r3, [r7, #23]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d105      	bne.n	8001dca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dbe:	4b3c      	ldr	r3, [pc, #240]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8087 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d061      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d146      	bne.n	8001e76 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <HAL_RCC_OscConfig+0x4cc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dee:	f7ff f843 	bl	8000e78 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df6:	f7ff f83f 	bl	8000e78 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e06d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e08:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f0      	bne.n	8001df6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e1c:	d108      	bne.n	8001e30 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e30:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a19      	ldr	r1, [r3, #32]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	430b      	orrs	r3, r1
 8001e42:	491b      	ldr	r1, [pc, #108]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_RCC_OscConfig+0x4cc>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff f813 	bl	8000e78 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e56:	f7ff f80f 	bl	8000e78 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e03d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46a>
 8001e74:	e035      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_RCC_OscConfig+0x4cc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe fffc 	bl	8000e78 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7fe fff8 	bl	8000e78 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e026      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x498>
 8001ea2:	e01e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d107      	bne.n	8001ebc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e019      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_OscConfig+0x500>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000

08001ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0d0      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4965      	ldr	r1, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d040      	beq.n	8002010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d115      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e073      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06b      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fce:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f023 0203 	bic.w	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4936      	ldr	r1, [pc, #216]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe ff4a 	bl	8000e78 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f7fe ff46 	bl	8000e78 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e053      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1eb      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d210      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	4922      	ldr	r1, [pc, #136]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4602      	mov	r2, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	490a      	ldr	r1, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	5ccb      	ldrb	r3, [r1, r3]
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1cc>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1d0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fea8 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08004c54 	.word	0x08004c54
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	2300      	movs	r3, #0
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <HAL_RCC_GetSysClockFreq+0x94>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0x36>
 80020f2:	e027      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_GetSysClockFreq+0x98>)
 80020f6:	613b      	str	r3, [r7, #16]
      break;
 80020f8:	e027      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0c9b      	lsrs	r3, r3, #18
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002104:	5cd3      	ldrb	r3, [r2, r3]
 8002106:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d010      	beq.n	8002134 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_RCC_GetSysClockFreq+0x94>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0c5b      	lsrs	r3, r3, #17
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	4a11      	ldr	r2, [pc, #68]	; (8002164 <HAL_RCC_GetSysClockFreq+0xa0>)
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a0d      	ldr	r2, [pc, #52]	; (800215c <HAL_RCC_GetSysClockFreq+0x98>)
 8002126:	fb03 f202 	mul.w	r2, r3, r2
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e004      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	4a0c      	ldr	r2, [pc, #48]	; (8002168 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002138:	fb02 f303 	mul.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	613b      	str	r3, [r7, #16]
      break;
 8002142:	e002      	b.n	800214a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <HAL_RCC_GetSysClockFreq+0x98>)
 8002146:	613b      	str	r3, [r7, #16]
      break;
 8002148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800214a:	693b      	ldr	r3, [r7, #16]
}
 800214c:	4618      	mov	r0, r3
 800214e:	371c      	adds	r7, #28
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	007a1200 	.word	0x007a1200
 8002160:	08004c6c 	.word	0x08004c6c
 8002164:	08004c7c 	.word	0x08004c7c
 8002168:	003d0900 	.word	0x003d0900

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b02      	ldr	r3, [pc, #8]	; (800217c <HAL_RCC_GetHCLKFreq+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	20000000 	.word	0x20000000

08002180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002184:	f7ff fff2 	bl	800216c <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	0a1b      	lsrs	r3, r3, #8
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08004c64 	.word	0x08004c64

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021ac:	f7ff ffde 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0adb      	lsrs	r3, r3, #11
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08004c64 	.word	0x08004c64

080021d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <RCC_Delay+0x34>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <RCC_Delay+0x38>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	0a5b      	lsrs	r3, r3, #9
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	fb02 f303 	mul.w	r3, r2, r3
 80021ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ec:	bf00      	nop
  }
  while (Delay --);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e5a      	subs	r2, r3, #1
 80021f2:	60fa      	str	r2, [r7, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1f9      	bne.n	80021ec <RCC_Delay+0x1c>
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000000 	.word	0x20000000
 8002208:	10624dd3 	.word	0x10624dd3

0800220c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e041      	b.n	80022a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fe fc76 	bl	8000b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3304      	adds	r3, #4
 8002248:	4619      	mov	r1, r3
 800224a:	4610      	mov	r0, r2
 800224c:	f000 fa74 	bl	8002738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d001      	beq.n	80022c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e03a      	b.n	800233a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a18      	ldr	r2, [pc, #96]	; (8002344 <HAL_TIM_Base_Start_IT+0x98>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00e      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d009      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <HAL_TIM_Base_Start_IT+0x9c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_TIM_Base_Start_IT+0x58>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_TIM_Base_Start_IT+0xa0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d111      	bne.n	8002328 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2b06      	cmp	r3, #6
 8002314:	d010      	beq.n	8002338 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002326:	e007      	b.n	8002338 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800

08002350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d122      	bne.n	80023ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b02      	cmp	r3, #2
 8002372:	d11b      	bne.n	80023ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0202 	mvn.w	r2, #2
 800237c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f9b4 	bl	8002700 <HAL_TIM_IC_CaptureCallback>
 8002398:	e005      	b.n	80023a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 f9a7 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f9b6 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d122      	bne.n	8002400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11b      	bne.n	8002400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0204 	mvn.w	r2, #4
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f98a 	bl	8002700 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f97d 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f98c 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b08      	cmp	r3, #8
 800240c:	d122      	bne.n	8002454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b08      	cmp	r3, #8
 800241a:	d11b      	bne.n	8002454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f06f 0208 	mvn.w	r2, #8
 8002424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2204      	movs	r2, #4
 800242a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f960 	bl	8002700 <HAL_TIM_IC_CaptureCallback>
 8002440:	e005      	b.n	800244e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f953 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f962 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b10      	cmp	r3, #16
 8002460:	d122      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b10      	cmp	r3, #16
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0210 	mvn.w	r2, #16
 8002478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2208      	movs	r2, #8
 800247e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 f936 	bl	8002700 <HAL_TIM_IC_CaptureCallback>
 8002494:	e005      	b.n	80024a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f929 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f938 	bl	8002712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10e      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d107      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f06f 0201 	mvn.w	r2, #1
 80024cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe f94c 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	2b80      	cmp	r3, #128	; 0x80
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b80      	cmp	r3, #128	; 0x80
 80024ee:	d107      	bne.n	8002500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa7b 	bl	80029f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800250a:	2b40      	cmp	r3, #64	; 0x40
 800250c:	d10e      	bne.n	800252c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002518:	2b40      	cmp	r3, #64	; 0x40
 800251a:	d107      	bne.n	800252c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f8fc 	bl	8002724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b20      	cmp	r3, #32
 8002538:	d10e      	bne.n	8002558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0320 	and.w	r3, r3, #32
 8002544:	2b20      	cmp	r3, #32
 8002546:	d107      	bne.n	8002558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0220 	mvn.w	r2, #32
 8002550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 fa46 	bl	80029e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_TIM_ConfigClockSource+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e0b4      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x186>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800259a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025b4:	d03e      	beq.n	8002634 <HAL_TIM_ConfigClockSource+0xd4>
 80025b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025ba:	f200 8087 	bhi.w	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025c2:	f000 8086 	beq.w	80026d2 <HAL_TIM_ConfigClockSource+0x172>
 80025c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ca:	d87f      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b70      	cmp	r3, #112	; 0x70
 80025ce:	d01a      	beq.n	8002606 <HAL_TIM_ConfigClockSource+0xa6>
 80025d0:	2b70      	cmp	r3, #112	; 0x70
 80025d2:	d87b      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b60      	cmp	r3, #96	; 0x60
 80025d6:	d050      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x11a>
 80025d8:	2b60      	cmp	r3, #96	; 0x60
 80025da:	d877      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b50      	cmp	r3, #80	; 0x50
 80025de:	d03c      	beq.n	800265a <HAL_TIM_ConfigClockSource+0xfa>
 80025e0:	2b50      	cmp	r3, #80	; 0x50
 80025e2:	d873      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b40      	cmp	r3, #64	; 0x40
 80025e6:	d058      	beq.n	800269a <HAL_TIM_ConfigClockSource+0x13a>
 80025e8:	2b40      	cmp	r3, #64	; 0x40
 80025ea:	d86f      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b30      	cmp	r3, #48	; 0x30
 80025ee:	d064      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x15a>
 80025f0:	2b30      	cmp	r3, #48	; 0x30
 80025f2:	d86b      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d060      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x15a>
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d867      	bhi.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d05c      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x15a>
 8002600:	2b10      	cmp	r3, #16
 8002602:	d05a      	beq.n	80026ba <HAL_TIM_ConfigClockSource+0x15a>
 8002604:	e062      	b.n	80026cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002616:	f000 f968 	bl	80028ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002628:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	609a      	str	r2, [r3, #8]
      break;
 8002632:	e04f      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002644:	f000 f951 	bl	80028ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689a      	ldr	r2, [r3, #8]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002656:	609a      	str	r2, [r3, #8]
      break;
 8002658:	e03c      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002666:	461a      	mov	r2, r3
 8002668:	f000 f8c8 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2150      	movs	r1, #80	; 0x50
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f91f 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002678:	e02c      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002686:	461a      	mov	r2, r3
 8002688:	f000 f8e6 	bl	8002858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2160      	movs	r1, #96	; 0x60
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f90f 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002698:	e01c      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026a6:	461a      	mov	r2, r3
 80026a8:	f000 f8a8 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2140      	movs	r1, #64	; 0x40
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f8ff 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80026b8:	e00c      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f000 f8f6 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80026ca:	e003      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      break;
 80026d0:	e000      	b.n	80026d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
	...

08002738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a29      	ldr	r2, [pc, #164]	; (80027f0 <TIM_Base_SetConfig+0xb8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00b      	beq.n	8002768 <TIM_Base_SetConfig+0x30>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002756:	d007      	beq.n	8002768 <TIM_Base_SetConfig+0x30>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a26      	ldr	r2, [pc, #152]	; (80027f4 <TIM_Base_SetConfig+0xbc>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d003      	beq.n	8002768 <TIM_Base_SetConfig+0x30>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <TIM_Base_SetConfig+0xc0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d108      	bne.n	800277a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <TIM_Base_SetConfig+0xb8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00b      	beq.n	800279a <TIM_Base_SetConfig+0x62>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002788:	d007      	beq.n	800279a <TIM_Base_SetConfig+0x62>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <TIM_Base_SetConfig+0xbc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_Base_SetConfig+0x62>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <TIM_Base_SetConfig+0xc0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d108      	bne.n	80027ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <TIM_Base_SetConfig+0xb8>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d103      	bne.n	80027e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	615a      	str	r2, [r3, #20]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00
 80027f4:	40000400 	.word	0x40000400
 80027f8:	40000800 	.word	0x40000800

080027fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 030a 	bic.w	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0210 	bic.w	r2, r3, #16
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	693a      	ldr	r2, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002894:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4313      	orrs	r3, r2
 800289e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f043 0307 	orr.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	021a      	lsls	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	609a      	str	r2, [r3, #8]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800293c:	2302      	movs	r3, #2
 800293e:	e046      	b.n	80029ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a16      	ldr	r2, [pc, #88]	; (80029d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00e      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d009      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d10c      	bne.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	40012c00 	.word	0x40012c00
 80029dc:	40000400 	.word	0x40000400
 80029e0:	40000800 	.word	0x40000800

080029e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e042      	b.n	8002aa0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe f90c 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	; 0x24
 8002a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fdc5 	bl	80035dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d16d      	bne.n	8002ba4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_UART_Transmit+0x2c>
 8002ace:	88fb      	ldrh	r3, [r7, #6]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e066      	b.n	8002ba6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2221      	movs	r2, #33	; 0x21
 8002ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe f9c7 	bl	8000e78 <HAL_GetTick>
 8002aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	88fa      	ldrh	r2, [r7, #6]
 8002af0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	88fa      	ldrh	r2, [r7, #6]
 8002af6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b00:	d108      	bne.n	8002b14 <HAL_UART_Transmit+0x6c>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	e003      	b.n	8002b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b1c:	e02a      	b.n	8002b74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fb14 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e036      	b.n	8002ba6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	3302      	adds	r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e007      	b.n	8002b66 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3301      	adds	r3, #1
 8002b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1cf      	bne.n	8002b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fae4 	bl	8003156 <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e006      	b.n	8002ba6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b20      	cmp	r3, #32
 8002bc6:	d112      	bne.n	8002bee <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d002      	beq.n	8002bd4 <HAL_UART_Receive_IT+0x26>
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e00b      	b.n	8002bf0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	461a      	mov	r2, r3
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fb24 	bl	8003232 <UART_Start_Receive_IT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	e000      	b.n	8002bf0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b0ba      	sub	sp, #232	; 0xe8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_UART_IRQHandler+0x66>
 8002c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fc01 	bl	800345e <UART_Receive_IT>
      return;
 8002c5c:	e25b      	b.n	8003116 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 80de 	beq.w	8002e24 <HAL_UART_IRQHandler+0x22c>
 8002c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d106      	bne.n	8002c82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80d1 	beq.w	8002e24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_UART_IRQHandler+0xae>
 8002c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_UART_IRQHandler+0xd2>
 8002cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f043 0202 	orr.w	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_UART_IRQHandler+0xf6>
 8002cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d005      	beq.n	8002cee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f043 0204 	orr.w	r2, r3, #4
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <HAL_UART_IRQHandler+0x126>
 8002cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d105      	bne.n	8002d12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0208 	orr.w	r2, r3, #8
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	f000 81f2 	beq.w	800310c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_UART_IRQHandler+0x14e>
 8002d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d38:	f003 0320 	and.w	r3, r3, #32
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fb8c 	bl	800345e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <HAL_UART_IRQHandler+0x17a>
 8002d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d04f      	beq.n	8002e12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 fa96 	bl	80032a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d041      	beq.n	8002e0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3314      	adds	r3, #20
 8002d8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3314      	adds	r3, #20
 8002dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002db2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002db6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1d9      	bne.n	8002d86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d013      	beq.n	8002e02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dde:	4a7e      	ldr	r2, [pc, #504]	; (8002fd8 <HAL_UART_IRQHandler+0x3e0>)
 8002de0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe f9bc 	bl	8001164 <HAL_DMA_Abort_IT>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e00e      	b.n	8002e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f993 	bl	800312e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e08:	e00a      	b.n	8002e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f98f 	bl	800312e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	e006      	b.n	8002e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f98b 	bl	800312e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e1e:	e175      	b.n	800310c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e20:	bf00      	nop
    return;
 8002e22:	e173      	b.n	800310c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	f040 814f 	bne.w	80030cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 8148 	beq.w	80030cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8141 	beq.w	80030cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60bb      	str	r3, [r7, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80b6 	beq.w	8002fdc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8145 	beq.w	8003110 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	f080 813e 	bcs.w	8003110 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f000 8088 	beq.w	8002fb8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	330c      	adds	r3, #12
 8002eae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ed4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ed8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002edc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ee0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ee4:	e841 2300 	strex	r3, r2, [r1]
 8002ee8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1d9      	bne.n	8002ea8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3314      	adds	r3, #20
 8002efa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3314      	adds	r3, #20
 8002f14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e1      	bne.n	8002ef4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3314      	adds	r3, #20
 8002f36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3a:	e853 3f00 	ldrex	r3, [r3]
 8002f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f5c:	e841 2300 	strex	r3, r2, [r1]
 8002f60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1e3      	bne.n	8002f30 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	330c      	adds	r3, #12
 8002f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f88:	f023 0310 	bic.w	r3, r3, #16
 8002f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	330c      	adds	r3, #12
 8002f96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e3      	bne.n	8002f76 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe f89b 	bl	80010ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8b6 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fd4:	e09c      	b.n	8003110 <HAL_UART_IRQHandler+0x518>
 8002fd6:	bf00      	nop
 8002fd8:	08003369 	.word	0x08003369
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 808e 	beq.w	8003114 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8089 	beq.w	8003114 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003014:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003026:	647a      	str	r2, [r7, #68]	; 0x44
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800302c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800302e:	e841 2300 	strex	r3, r2, [r1]
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1e3      	bne.n	8003002 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	3314      	adds	r3, #20
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	e853 3f00 	ldrex	r3, [r3]
 8003048:	623b      	str	r3, [r7, #32]
   return(result);
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f023 0301 	bic.w	r3, r3, #1
 8003050:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3314      	adds	r3, #20
 800305a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800305e:	633a      	str	r2, [r7, #48]	; 0x30
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1e3      	bne.n	800303a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	e853 3f00 	ldrex	r3, [r3]
 800308e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0310 	bic.w	r3, r3, #16
 8003096:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	330c      	adds	r3, #12
 80030a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80030a4:	61fa      	str	r2, [r7, #28]
 80030a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	69b9      	ldr	r1, [r7, #24]
 80030aa:	69fa      	ldr	r2, [r7, #28]
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	617b      	str	r3, [r7, #20]
   return(result);
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e3      	bne.n	8003080 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2202      	movs	r2, #2
 80030bc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030c2:	4619      	mov	r1, r3
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f83b 	bl	8003140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030ca:	e023      	b.n	8003114 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_UART_IRQHandler+0x4f4>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f953 	bl	8003390 <UART_Transmit_IT>
    return;
 80030ea:	e014      	b.n	8003116 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00e      	beq.n	8003116 <HAL_UART_IRQHandler+0x51e>
 80030f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f992 	bl	800342e <UART_EndTransmit_IT>
    return;
 800310a:	e004      	b.n	8003116 <HAL_UART_IRQHandler+0x51e>
    return;
 800310c:	bf00      	nop
 800310e:	e002      	b.n	8003116 <HAL_UART_IRQHandler+0x51e>
      return;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <HAL_UART_IRQHandler+0x51e>
      return;
 8003114:	bf00      	nop
  }
}
 8003116:	37e8      	adds	r7, #232	; 0xe8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	bc80      	pop	{r7}
 800313e:	4770      	bx	lr

08003140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b090      	sub	sp, #64	; 0x40
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	603b      	str	r3, [r7, #0]
 8003162:	4613      	mov	r3, r2
 8003164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003166:	e050      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003168:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d04c      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <UART_WaitOnFlagUntilTimeout+0x30>
 8003176:	f7fd fe7f 	bl	8000e78 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003182:	429a      	cmp	r2, r3
 8003184:	d241      	bcs.n	800320a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	330c      	adds	r3, #12
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003190:	e853 3f00 	ldrex	r3, [r3]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	330c      	adds	r3, #12
 80031a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031a6:	637a      	str	r2, [r7, #52]	; 0x34
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ae:	e841 2300 	strex	r3, r2, [r1]
 80031b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1e5      	bne.n	8003186 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3314      	adds	r3, #20
 80031c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	e853 3f00 	ldrex	r3, [r3]
 80031c8:	613b      	str	r3, [r7, #16]
   return(result);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3314      	adds	r3, #20
 80031d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031da:	623a      	str	r2, [r7, #32]
 80031dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	69f9      	ldr	r1, [r7, #28]
 80031e0:	6a3a      	ldr	r2, [r7, #32]
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e5      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00f      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d09f      	beq.n	8003168 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3740      	adds	r7, #64	; 0x40
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	4613      	mov	r3, r2
 800323e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	88fa      	ldrh	r2, [r7, #6]
 8003250:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2222      	movs	r2, #34	; 0x22
 800325c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003276:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68da      	ldr	r2, [r3, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr

080032a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b095      	sub	sp, #84	; 0x54
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b6:	e853 3f00 	ldrex	r3, [r3]
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	330c      	adds	r3, #12
 80032ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032cc:	643a      	str	r2, [r7, #64]	; 0x40
 80032ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032d4:	e841 2300 	strex	r3, r2, [r1]
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e5      	bne.n	80032ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3314      	adds	r3, #20
 80032e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003300:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e5      	bne.n	80032e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b01      	cmp	r3, #1
 800331a:	d119      	bne.n	8003350 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	60bb      	str	r3, [r7, #8]
   return(result);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f023 0310 	bic.w	r3, r3, #16
 8003332:	647b      	str	r3, [r7, #68]	; 0x44
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333c:	61ba      	str	r2, [r7, #24]
 800333e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6979      	ldr	r1, [r7, #20]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	613b      	str	r3, [r7, #16]
   return(result);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e5      	bne.n	800331c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800335e:	bf00      	nop
 8003360:	3754      	adds	r7, #84	; 0x54
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff fed3 	bl	800312e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b21      	cmp	r3, #33	; 0x21
 80033a2:	d13e      	bne.n	8003422 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ac:	d114      	bne.n	80033d8 <UART_Transmit_IT+0x48>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d110      	bne.n	80033d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	621a      	str	r2, [r3, #32]
 80033d6:	e008      	b.n	80033ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	1c59      	adds	r1, r3, #1
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6211      	str	r1, [r2, #32]
 80033e2:	781a      	ldrb	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4619      	mov	r1, r3
 80033f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800340c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	e000      	b.n	8003424 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68da      	ldr	r2, [r3, #12]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fe64 	bl	800311c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b08c      	sub	sp, #48	; 0x30
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b22      	cmp	r3, #34	; 0x22
 8003470:	f040 80ae 	bne.w	80035d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d117      	bne.n	80034ae <UART_Receive_IT+0x50>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d113      	bne.n	80034ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003486:	2300      	movs	r3, #0
 8003488:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349c:	b29a      	uxth	r2, r3
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	1c9a      	adds	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
 80034ac:	e026      	b.n	80034fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034c0:	d007      	beq.n	80034d2 <UART_Receive_IT+0x74>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <UART_Receive_IT+0x82>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e008      	b.n	80034f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29b      	uxth	r3, r3
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	4619      	mov	r1, r3
 800350a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800350c:	2b00      	cmp	r3, #0
 800350e:	d15d      	bne.n	80035cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f022 0220 	bic.w	r2, r2, #32
 800351e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800352e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	2b01      	cmp	r3, #1
 8003554:	d135      	bne.n	80035c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	330c      	adds	r3, #12
 8003562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	613b      	str	r3, [r7, #16]
   return(result);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f023 0310 	bic.w	r3, r3, #16
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357c:	623a      	str	r2, [r7, #32]
 800357e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	69f9      	ldr	r1, [r7, #28]
 8003582:	6a3a      	ldr	r2, [r7, #32]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	61bb      	str	r3, [r7, #24]
   return(result);
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b10      	cmp	r3, #16
 800359c:	d10a      	bne.n	80035b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff fdc0 	bl	8003140 <HAL_UARTEx_RxEventCallback>
 80035c0:	e002      	b.n	80035c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f001 fad4 	bl	8004b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e002      	b.n	80035d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	e000      	b.n	80035d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035d0:	2302      	movs	r3, #2
  }
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3730      	adds	r7, #48	; 0x30
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003616:	f023 030c 	bic.w	r3, r3, #12
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	68b9      	ldr	r1, [r7, #8]
 8003620:	430b      	orrs	r3, r1
 8003622:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2c      	ldr	r2, [pc, #176]	; (80036f0 <UART_SetConfig+0x114>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d103      	bne.n	800364c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003644:	f7fe fdb0 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	e002      	b.n	8003652 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7fe fd98 	bl	8002180 <HAL_RCC_GetPCLK1Freq>
 8003650:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009a      	lsls	r2, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	fbb2 f3f3 	udiv	r3, r2, r3
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <UART_SetConfig+0x118>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	095b      	lsrs	r3, r3, #5
 8003670:	0119      	lsls	r1, r3, #4
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	441a      	add	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	fbb2 f2f3 	udiv	r2, r2, r3
 8003688:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <UART_SetConfig+0x118>)
 800368a:	fba3 0302 	umull	r0, r3, r3, r2
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2064      	movs	r0, #100	; 0x64
 8003692:	fb00 f303 	mul.w	r3, r0, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	3332      	adds	r3, #50	; 0x32
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <UART_SetConfig+0x118>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036a8:	4419      	add	r1, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009a      	lsls	r2, r3, #2
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <UART_SetConfig+0x118>)
 80036c2:	fba3 0302 	umull	r0, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2064      	movs	r0, #100	; 0x64
 80036ca:	fb00 f303 	mul.w	r3, r0, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <UART_SetConfig+0x118>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 020f 	and.w	r2, r3, #15
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	440a      	add	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40013800 	.word	0x40013800
 80036f4:	51eb851f 	.word	0x51eb851f

080036f8 <read_flash_data_for_CS5530>:
//MAX_MIN_FILTER mm_filter_1_2;



void read_flash_data_for_CS5530(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
	uint16_t flash_read[4] = {0x00, 0x00, 0x00, 0x00};
 80036fe:	1d3b      	adds	r3, r7, #4
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
	uint32_t flash_read_temp = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]


	STMFLASH_Read(USER_OFFSET_1, flash_read, 2); // 读取0点
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	2202      	movs	r2, #2
 800370e:	4619      	mov	r1, r3
 8003710:	4821      	ldr	r0, [pc, #132]	; (8003798 <read_flash_data_for_CS5530+0xa0>)
 8003712:	f001 f95d 	bl	80049d0 <STMFLASH_Read>
	SPI_Delay_us(200);
 8003716:	20c8      	movs	r0, #200	; 0xc8
 8003718:	f000 facf 	bl	8003cba <SPI_Delay_us>
	ADC.zero_offset = (flash_read[0] << 16) + flash_read[1];
 800371c:	88bb      	ldrh	r3, [r7, #4]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	4413      	add	r3, r2
 8003724:	4a1d      	ldr	r2, [pc, #116]	; (800379c <read_flash_data_for_CS5530+0xa4>)
 8003726:	61d3      	str	r3, [r2, #28]
	if ((flash_read[0] == 0xffff) && (flash_read[1] == 0xffff)) // 初次上电
 8003728:	88bb      	ldrh	r3, [r7, #4]
 800372a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800372e:	4293      	cmp	r3, r2
 8003730:	d107      	bne.n	8003742 <read_flash_data_for_CS5530+0x4a>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003738:	4293      	cmp	r3, r2
 800373a:	d102      	bne.n	8003742 <read_flash_data_for_CS5530+0x4a>
	{
		ADC.zero_offset = 0;
 800373c:	4b17      	ldr	r3, [pc, #92]	; (800379c <read_flash_data_for_CS5530+0xa4>)
 800373e:	2200      	movs	r2, #0
 8003740:	61da      	str	r2, [r3, #28]
	}
	STMFLASH_Read(STANDARDIZATION_1, flash_read, 2); // 标定的K值
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2202      	movs	r2, #2
 8003746:	4619      	mov	r1, r3
 8003748:	4815      	ldr	r0, [pc, #84]	; (80037a0 <read_flash_data_for_CS5530+0xa8>)
 800374a:	f001 f941 	bl	80049d0 <STMFLASH_Read>
	SPI_Delay_us(200);
 800374e:	20c8      	movs	r0, #200	; 0xc8
 8003750:	f000 fab3 	bl	8003cba <SPI_Delay_us>
	flash_read_temp = (flash_read[0] << 16) + flash_read[1];
 8003754:	88bb      	ldrh	r3, [r7, #4]
 8003756:	041b      	lsls	r3, r3, #16
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
	ADC.K_convert = (float)flash_read_temp / 100000000;
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f7fc fdaa 	bl	80002b8 <__aeabi_ui2f>
 8003764:	4603      	mov	r3, r0
 8003766:	490f      	ldr	r1, [pc, #60]	; (80037a4 <read_flash_data_for_CS5530+0xac>)
 8003768:	4618      	mov	r0, r3
 800376a:	f7fc feb1 	bl	80004d0 <__aeabi_fdiv>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <read_flash_data_for_CS5530+0xa4>)
 8003774:	625a      	str	r2, [r3, #36]	; 0x24
	if ((flash_read[0] == 0xffff) && (flash_read[1] == 0xffff))
 8003776:	88bb      	ldrh	r3, [r7, #4]
 8003778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800377c:	4293      	cmp	r3, r2
 800377e:	d107      	bne.n	8003790 <read_flash_data_for_CS5530+0x98>
 8003780:	88fb      	ldrh	r3, [r7, #6]
 8003782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003786:	4293      	cmp	r3, r2
 8003788:	d102      	bne.n	8003790 <read_flash_data_for_CS5530+0x98>
	{
		ADC.K_convert = DEFAULT_K_CONVERT;
 800378a:	4b04      	ldr	r3, [pc, #16]	; (800379c <read_flash_data_for_CS5530+0xa4>)
 800378c:	4a06      	ldr	r2, [pc, #24]	; (80037a8 <read_flash_data_for_CS5530+0xb0>)
 800378e:	625a      	str	r2, [r3, #36]	; 0x24
	}

}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	0801fc00 	.word	0x0801fc00
 800379c:	20000170 	.word	0x20000170
 80037a0:	0801fc10 	.word	0x0801fc10
 80037a4:	4cbebc20 	.word	0x4cbebc20
 80037a8:	379c4001 	.word	0x379c4001

080037ac <ADC1_init>:

void ADC1_init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
	uint8_t i;
	uint32_t tmp = 0x00AA;
 80037b2:	23aa      	movs	r3, #170	; 0xaa
 80037b4:	603b      	str	r3, [r7, #0]

	ADC_CS_LOW();
 80037b6:	2200      	movs	r2, #0
 80037b8:	2110      	movs	r1, #16
 80037ba:	4833      	ldr	r0, [pc, #204]	; (8003888 <ADC1_init+0xdc>)
 80037bc:	f7fe f8e5 	bl	800198a <HAL_GPIO_WritePin>
	SPI_Delay_ms(5);
 80037c0:	2005      	movs	r0, #5
 80037c2:	f000 fa90 	bl	8003ce6 <SPI_Delay_ms>

	ADC_SDI_LOW();
 80037c6:	2200      	movs	r2, #0
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	482f      	ldr	r0, [pc, #188]	; (8003888 <ADC1_init+0xdc>)
 80037cc:	f7fe f8dd 	bl	800198a <HAL_GPIO_WritePin>
	ADC_SCK_LOW();
 80037d0:	2200      	movs	r2, #0
 80037d2:	2120      	movs	r1, #32
 80037d4:	482c      	ldr	r0, [pc, #176]	; (8003888 <ADC1_init+0xdc>)
 80037d6:	f7fe f8d8 	bl	800198a <HAL_GPIO_WritePin>

	//	/* 复位串口进入命令模式 */
	for (i = 0; i < 16; i++)
 80037da:	2300      	movs	r3, #0
 80037dc:	71fb      	strb	r3, [r7, #7]
 80037de:	e005      	b.n	80037ec <ADC1_init+0x40>
	{
		ADC_SPI_Write_Byte(SYNC1_CMD); // 初始化串口
 80037e0:	20ff      	movs	r0, #255	; 0xff
 80037e2:	f000 fa99 	bl	8003d18 <ADC_SPI_Write_Byte>
	for (i = 0; i < 16; i++)
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	3301      	adds	r3, #1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	79fb      	ldrb	r3, [r7, #7]
 80037ee:	2b0f      	cmp	r3, #15
 80037f0:	d9f6      	bls.n	80037e0 <ADC1_init+0x34>
	}
	ADC_SPI_Write_Byte(SYNC0_CMD);
 80037f2:	20fe      	movs	r0, #254	; 0xfe
 80037f4:	f000 fa90 	bl	8003d18 <ADC_SPI_Write_Byte>
	SPI_Delay_ms(1);
 80037f8:	2001      	movs	r0, #1
 80037fa:	f000 fa74 	bl	8003ce6 <SPI_Delay_ms>

	/* 系统复位 */
	ADC_SPI_Write_Reg(WO_CONFIG_REG_CMD, REG_CONFIG_RS);
 80037fe:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8003802:	2003      	movs	r0, #3
 8003804:	f000 fae2 	bl	8003dcc <ADC_SPI_Write_Reg>
	SPI_Delay_ms(1);
 8003808:	2001      	movs	r0, #1
 800380a:	f000 fa6c 	bl	8003ce6 <SPI_Delay_ms>

	/* 清除系统复位标志 */
	ADC_SPI_Write_Reg(WO_CONFIG_REG_CMD, 0x00000000);
 800380e:	2100      	movs	r1, #0
 8003810:	2003      	movs	r0, #3
 8003812:	f000 fadb 	bl	8003dcc <ADC_SPI_Write_Reg>
	SPI_Delay_ms(1);
 8003816:	2001      	movs	r0, #1
 8003818:	f000 fa65 	bl	8003ce6 <SPI_Delay_ms>

	/* 读取系统复位完成标志 */
	do
	{
		tmp = ADC_SPI_Read_Reg(RO_CONFIG_REG_CMD);
 800381c:	200b      	movs	r0, #11
 800381e:	f000 fb43 	bl	8003ea8 <ADC_SPI_Read_Reg>
 8003822:	6038      	str	r0, [r7, #0]
		SPI_Delay_ms(50);
 8003824:	2032      	movs	r0, #50	; 0x32
 8003826:	f000 fa5e 	bl	8003ce6 <SPI_Delay_ms>
	} while (tmp & REG_CONFIG_RV);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f3      	bne.n	800381c <ADC1_init+0x70>

//	ADC_SPI_Write_Reg(WO_GAIN_REG_CMD, 0x02000000); // 设置放大倍数128
	ADC_SPI_Write_Reg(WO_GAIN_REG_CMD, 0x04000000); // 设置放大倍数256
 8003834:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003838:	2002      	movs	r0, #2
 800383a:	f000 fac7 	bl	8003dcc <ADC_SPI_Write_Reg>
	SPI_Delay_ms(1);
 800383e:	2001      	movs	r0, #1
 8003840:	f000 fa51 	bl	8003ce6 <SPI_Delay_ms>
	//	tmp = SPI_Read_Reg(RO_GAIN_REG_CMD); //默认放大倍数是64
	//	SPI_Delay_ms(10);
	////

	tmp = ADC_SPI_Read_Reg(RO_CONFIG_REG_CMD);
 8003844:	200b      	movs	r0, #11
 8003846:	f000 fb2f 	bl	8003ea8 <ADC_SPI_Read_Reg>
 800384a:	6038      	str	r0, [r7, #0]
	SPI_Delay_ms(1);
 800384c:	2001      	movs	r0, #1
 800384e:	f000 fa4a 	bl	8003ce6 <SPI_Delay_ms>
//	ADC_SPI_Write_Reg(WO_CONFIG_REG_CMD, tmp | 0x00082000); // FRS =1  WR3~WR0  0100    6.25Sps
	ADC_SPI_Write_Reg(WO_CONFIG_REG_CMD, tmp | 0x00081000); // FRS =1  WR3~WR0  0010    25Sps
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	f443 2301 	orr.w	r3, r3, #528384	; 0x81000
 8003858:	4619      	mov	r1, r3
 800385a:	2003      	movs	r0, #3
 800385c:	f000 fab6 	bl	8003dcc <ADC_SPI_Write_Reg>
//	ADC_SPI_Write_Reg(WO_CONFIG_REG_CMD, tmp | 0x00080800); // FRS =1  WR3~WR0  0010    50Sps
//	ADC_SPI_Write_Reg(WO_CONFIG_REG_CMD, tmp | 0x00080000); // FRS =1  WR3~WR0  0000    100Sps

	SPI_Delay_ms(1);
 8003860:	2001      	movs	r0, #1
 8003862:	f000 fa40 	bl	8003ce6 <SPI_Delay_ms>

	tmp = ADC_SPI_Read_Reg(RO_CONFIG_REG_CMD); //
 8003866:	200b      	movs	r0, #11
 8003868:	f000 fb1e 	bl	8003ea8 <ADC_SPI_Read_Reg>
 800386c:	6038      	str	r0, [r7, #0]
	SPI_Delay_ms(1);
 800386e:	2001      	movs	r0, #1
 8003870:	f000 fa39 	bl	8003ce6 <SPI_Delay_ms>

	// CS5530默认 VRS = 0  单极性
	ADC_SPI_Write_Byte(CONTINU_CONVER_CMD); // 连续转换模式
 8003874:	20c0      	movs	r0, #192	; 0xc0
 8003876:	f000 fa4f 	bl	8003d18 <ADC_SPI_Write_Byte>
	SPI_Delay_ms(1);
 800387a:	2001      	movs	r0, #1
 800387c:	f000 fa33 	bl	8003ce6 <SPI_Delay_ms>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40010800 	.word	0x40010800

0800388c <ADC_init>:

void ADC_init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
	ADC1_init();
 8003890:	f7ff ff8c 	bl	80037ac <ADC1_init>
	read_flash_data_for_CS5530();
 8003894:	f7ff ff30 	bl	80036f8 <read_flash_data_for_CS5530>
	HAL_TIM_Base_Start_IT(&htim3); //开启采样定时器，50Hz
 8003898:	4802      	ldr	r0, [pc, #8]	; (80038a4 <ADC_init+0x18>)
 800389a:	f7fe fd07 	bl	80022ac <HAL_TIM_Base_Start_IT>
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000074 	.word	0x20000074

080038a8 <ADC_read_ad_data>:

int32_t ADC_read_ad_data(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
	int32_t data_temp;
	int32_t ad_data;
	data_temp = ADC_SPI_Read_Reg(NULL_CMD);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f000 fafa 	bl	8003ea8 <ADC_SPI_Read_Reg>
 80038b4:	4603      	mov	r3, r0
 80038b6:	607b      	str	r3, [r7, #4]
	data_temp &= 0xFFFFFF00;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038be:	607b      	str	r3, [r7, #4]
	ad_data = (data_temp >> 8);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	121b      	asrs	r3, r3, #8
 80038c4:	603b      	str	r3, [r7, #0]
//	if(ad_data>12582912)  //  如果传感器没有重物，可能会有负值出现，滤掉负值
//	{
//		ad_data = 16777216- ad_data;
//	}
	return (ad_data >> 5); // 去掉噪声位
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	115b      	asrs	r3, r3, #5
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <ADC_read_value>:


void ADC_read_value(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
		ADC.CS5530_ad_original = ADC_read_ad_data();
 80038d8:	f7ff ffe6 	bl	80038a8 <ADC_read_ad_data>
 80038dc:	4603      	mov	r3, r0
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <ADC_read_value+0x7c>)
 80038e0:	6013      	str	r3, [r2, #0]
//		printf("ADC1_data = %d \r\n",ADC.CS5530_ad_original);
		ADC.CS5530_ad_original_filter_1 = window_filter(ADC.CS5530_ad_original, ad1_window_buf, WIN_NUM);
 80038e2:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <ADC_read_value+0x7c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	220a      	movs	r2, #10
 80038e8:	491a      	ldr	r1, [pc, #104]	; (8003954 <ADC_read_value+0x80>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f8ac 	bl	8003a48 <window_filter>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <ADC_read_value+0x7c>)
 80038f4:	6093      	str	r3, [r2, #8]
		ADC.CS5530_ad_original_filter_2 = max_min_filter(ADC.CS5530_ad_original_filter_1, &mm_filter_1);
 80038f6:	4b16      	ldr	r3, [pc, #88]	; (8003950 <ADC_read_value+0x7c>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4917      	ldr	r1, [pc, #92]	; (8003958 <ADC_read_value+0x84>)
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f8e9 	bl	8003ad4 <max_min_filter>
 8003902:	4603      	mov	r3, r0
 8003904:	4a12      	ldr	r2, [pc, #72]	; (8003950 <ADC_read_value+0x7c>)
 8003906:	60d3      	str	r3, [r2, #12]
		ADC.CS5530_ad_original_new  = ADC.CS5530_ad_original_filter_2;
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <ADC_read_value+0x7c>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a10      	ldr	r2, [pc, #64]	; (8003950 <ADC_read_value+0x7c>)
 800390e:	6053      	str	r3, [r2, #4]
		ADC.AD_value = ADC.CS5530_ad_original_new - ADC.zero_offset - ADC.peel;
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <ADC_read_value+0x7c>)
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <ADC_read_value+0x7c>)
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	1ad2      	subs	r2, r2, r3
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <ADC_read_value+0x7c>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <ADC_read_value+0x7c>)
 8003922:	6113      	str	r3, [r2, #16]
		ADC.weight_value_new = ADC.AD_value * ADC.K_convert;
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <ADC_read_value+0x7c>)
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fcc9 	bl	80002c0 <__aeabi_i2f>
 800392e:	4602      	mov	r2, r0
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <ADC_read_value+0x7c>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7fc fd16 	bl	8000368 <__aeabi_fmul>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	4b03      	ldr	r3, [pc, #12]	; (8003950 <ADC_read_value+0x7c>)
 8003942:	619a      	str	r2, [r3, #24]
		ADC.weight_value = ADC.weight_value_new;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <ADC_read_value+0x7c>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4a01      	ldr	r2, [pc, #4]	; (8003950 <ADC_read_value+0x7c>)
 800394a:	6153      	str	r3, [r2, #20]
//		printf("weight = %f \r\n",ADC.weight_value);

}
 800394c:	bf00      	nop
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000170 	.word	0x20000170
 8003954:	20000200 	.word	0x20000200
 8003958:	200001b0 	.word	0x200001b0

0800395c <CS5530_set_zero_offset>:

void CS5530_set_zero_offset(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
	uint16_t flash_write[2] = {0x00, 0x00};
 8003962:	2300      	movs	r3, #0
 8003964:	80bb      	strh	r3, [r7, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	80fb      	strh	r3, [r7, #6]

		ADC.zero_offset = ADC.CS5530_ad_original_new;
 800396a:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <CS5530_set_zero_offset+0x3c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a0a      	ldr	r2, [pc, #40]	; (8003998 <CS5530_set_zero_offset+0x3c>)
 8003970:	61d3      	str	r3, [r2, #28]
		flash_write[0] = ADC.zero_offset >> 16;
 8003972:	4b09      	ldr	r3, [pc, #36]	; (8003998 <CS5530_set_zero_offset+0x3c>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	141b      	asrs	r3, r3, #16
 8003978:	b29b      	uxth	r3, r3
 800397a:	80bb      	strh	r3, [r7, #4]
		flash_write[1] = ADC.zero_offset;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <CS5530_set_zero_offset+0x3c>)
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	b29b      	uxth	r3, r3
 8003982:	80fb      	strh	r3, [r7, #6]
		STMFLASH_Write(USER_OFFSET_1, flash_write, 2);
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	2202      	movs	r2, #2
 8003988:	4619      	mov	r1, r3
 800398a:	4804      	ldr	r0, [pc, #16]	; (800399c <CS5530_set_zero_offset+0x40>)
 800398c:	f000 fef6 	bl	800477c <STMFLASH_Write>


}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000170 	.word	0x20000170
 800399c:	0801fc00 	.word	0x0801fc00

080039a0 <CS5530_standardization>:

void CS5530_standardization(float standard_weight)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	uint16_t flash_write[2] = {0x00, 0x00};
 80039a8:	2300      	movs	r3, #0
 80039aa:	813b      	strh	r3, [r7, #8]
 80039ac:	2300      	movs	r3, #0
 80039ae:	817b      	strh	r3, [r7, #10]
	float k_temp;
		ADC.standardization_AD = ADC.CS5530_ad_original_new - ADC.zero_offset;
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <CS5530_standardization+0x98>)
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	4b20      	ldr	r3, [pc, #128]	; (8003a38 <CS5530_standardization+0x98>)
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <CS5530_standardization+0x98>)
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
		ADC.standardization_kg = standard_weight/1000.0f;
 80039be:	491f      	ldr	r1, [pc, #124]	; (8003a3c <CS5530_standardization+0x9c>)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fc fd85 	bl	80004d0 <__aeabi_fdiv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <CS5530_standardization+0x98>)
 80039cc:	62da      	str	r2, [r3, #44]	; 0x2c
		ADC.standardization_K_convert = ADC.standardization_kg / ADC.standardization_AD;
 80039ce:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <CS5530_standardization+0x98>)
 80039d0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <CS5530_standardization+0x98>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fc fc72 	bl	80002c0 <__aeabi_i2f>
 80039dc:	4603      	mov	r3, r0
 80039de:	4619      	mov	r1, r3
 80039e0:	4620      	mov	r0, r4
 80039e2:	f7fc fd75 	bl	80004d0 <__aeabi_fdiv>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <CS5530_standardization+0x98>)
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34
		ADC.K_convert = ADC.standardization_K_convert;
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <CS5530_standardization+0x98>)
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	4a11      	ldr	r2, [pc, #68]	; (8003a38 <CS5530_standardization+0x98>)
 80039f4:	6253      	str	r3, [r2, #36]	; 0x24
		k_temp = ADC.K_convert * 100000000;
 80039f6:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <CS5530_standardization+0x98>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fa:	4911      	ldr	r1, [pc, #68]	; (8003a40 <CS5530_standardization+0xa0>)
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fc fcb3 	bl	8000368 <__aeabi_fmul>
 8003a02:	4603      	mov	r3, r0
 8003a04:	60fb      	str	r3, [r7, #12]
		flash_write[0] = (uint32_t)(k_temp) >> 16;
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f7fc fe24 	bl	8000654 <__aeabi_f2uiz>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	0c1b      	lsrs	r3, r3, #16
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	813b      	strh	r3, [r7, #8]
		flash_write[1] = (uint32_t)(k_temp);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f7fc fe1d 	bl	8000654 <__aeabi_f2uiz>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	817b      	strh	r3, [r7, #10]
		STMFLASH_Write(STANDARDIZATION_1, flash_write, 2);
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	2202      	movs	r2, #2
 8003a26:	4619      	mov	r1, r3
 8003a28:	4806      	ldr	r0, [pc, #24]	; (8003a44 <CS5530_standardization+0xa4>)
 8003a2a:	f000 fea7 	bl	800477c <STMFLASH_Write>

}
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd90      	pop	{r4, r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000170 	.word	0x20000170
 8003a3c:	447a0000 	.word	0x447a0000
 8003a40:	4cbebc20 	.word	0x4cbebc20
 8003a44:	0801fc10 	.word	0x0801fc10

08003a48 <window_filter>:
	}
}

// 滑动窗口滤波
int32_t window_filter(int32_t data, int32_t *buf, uint8_t len)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	4613      	mov	r3, r2
 8003a54:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	int32_t sum = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]

	for (i = 1; i < len; i++)
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
 8003a5e:	e00f      	b.n	8003a80 <window_filter+0x38>
	{
		buf[i - 1] = buf[i];
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	441a      	add	r2, r3
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	440b      	add	r3, r1
 8003a76:	6812      	ldr	r2, [r2, #0]
 8003a78:	601a      	str	r2, [r3, #0]
	for (i = 1; i < len; i++)
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	75fb      	strb	r3, [r7, #23]
 8003a80:	7dfa      	ldrb	r2, [r7, #23]
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d3eb      	bcc.n	8003a60 <window_filter+0x18>
	}
	buf[len - 1] = data;
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	601a      	str	r2, [r3, #0]

	for (i = 0; i < len; i++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
 8003a9e:	e00a      	b.n	8003ab6 <window_filter+0x6e>
	{
		sum += buf[i];
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
	for (i = 0; i < len; i++)
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	75fb      	strb	r3, [r7, #23]
 8003ab6:	7dfa      	ldrb	r2, [r7, #23]
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3f0      	bcc.n	8003aa0 <window_filter+0x58>
	}

	sum /= len;
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ac6:	613b      	str	r3, [r7, #16]

	return sum;
 8003ac8:	693b      	ldr	r3, [r7, #16]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	371c      	adds	r7, #28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <max_min_filter>:



int32_t max_min_filter(int32_t data_input, MAX_MIN_FILTER *mm_data) // 最大值最小值滤波
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
	int8_t i;
//	int32_t max_ret, min_ret;
	if (abs(data_input - mm_data->data_input_last) > 10) // 与上次值相差太大，则开始滤波
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfb8      	it	lt
 8003aea:	425b      	neglt	r3, r3
 8003aec:	2b0a      	cmp	r3, #10
 8003aee:	dd0e      	ble.n	8003b0e <max_min_filter+0x3a>
	{
		mm_data->cnt = 0;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	609a      	str	r2, [r3, #8]
		mm_data->min_sum = 0;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2200      	movs	r2, #0
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
		mm_data->min_sum = 0;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
		mm_data->max_num = 0;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2200      	movs	r2, #0
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
		mm_data->min_num = 0;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	if (mm_data->cnt == 0) // 第一次，初始化最大最小值
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d105      	bne.n	8003b22 <max_min_filter+0x4e>
	{
		mm_data->max_new = data_input;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	601a      	str	r2, [r3, #0]
		mm_data->min_new = data_input;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	605a      	str	r2, [r3, #4]
	}
	if (data_input > mm_data->max_new) // 最大值更新
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	dd19      	ble.n	8003b60 <max_min_filter+0x8c>
	{
		mm_data->max_new = data_input;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
		mm_data->max_value[mm_data->max_num] = mm_data->max_new;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	6819      	ldr	r1, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	3204      	adds	r2, #4
 8003b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		mm_data->max_num++;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38

		if (mm_data->max_num >= MAX_MIN_AVR_NUM)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	dd05      	ble.n	8003b60 <max_min_filter+0x8c>
		{
			mm_data->max_num = 0;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2200      	movs	r2, #0
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38
			mm_data->max_sum = 0;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
	if (data_input < mm_data->min_new) // 最小值更新
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	da2e      	bge.n	8003bc8 <max_min_filter+0xf4>
	{
		mm_data->min_new = data_input;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	605a      	str	r2, [r3, #4]
		mm_data->min_value[mm_data->min_num] = mm_data->min_new;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	683a      	ldr	r2, [r7, #0]
 8003b76:	6852      	ldr	r2, [r2, #4]
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	605a      	str	r2, [r3, #4]
		mm_data->min_num++;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	63da      	str	r2, [r3, #60]	; 0x3c
		mm_data->min_sum = mm_data->min_sum + mm_data->min_value[mm_data->min_num];
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	6839      	ldr	r1, [r7, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	645a      	str	r2, [r3, #68]	; 0x44
		mm_data->min_avr = mm_data->min_sum / mm_data->min_num;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	fb92 f2f3 	sdiv	r2, r2, r3
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	64da      	str	r2, [r3, #76]	; 0x4c
		if (mm_data->min_num >= MAX_MIN_AVR_NUM)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	dd05      	ble.n	8003bc8 <max_min_filter+0xf4>
		{
			mm_data->min_num = 0;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c
			mm_data->min_sum = 0;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}
	mm_data->cnt++;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	1c5a      	adds	r2, r3, #1
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	609a      	str	r2, [r3, #8]
	if (mm_data->cnt == MAX_MIN_WINDOW) // 滤波窗口大小
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b19      	cmp	r3, #25
 8003bd8:	d102      	bne.n	8003be0 <max_min_filter+0x10c>
	{
		mm_data->cnt = 0;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	609a      	str	r2, [r3, #8]
	}
	mm_data->data_input_last = data_input;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	60da      	str	r2, [r3, #12]

	if (mm_data->max_num > 0)
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	dd25      	ble.n	8003c3a <max_min_filter+0x166>
	{
		mm_data->max_sum = 0;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	641a      	str	r2, [r3, #64]	; 0x40
		for (i = 0; i < mm_data->max_num; i++) // 最大值累加
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e010      	b.n	8003c1c <max_min_filter+0x148>
		{
			mm_data->max_sum = mm_data->max_sum + mm_data->max_value[i];
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfe:	f997 100f 	ldrsb.w	r1, [r7, #15]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	3104      	adds	r1, #4
 8003c06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
		for (i = 0; i < mm_data->max_num; i++) // 最大值累加
 8003c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dbe8      	blt.n	8003bfa <max_min_filter+0x126>
		}
		mm_data->max_avr = mm_data->max_sum / mm_data->max_num;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	fb92 f2f3 	sdiv	r2, r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	649a      	str	r2, [r3, #72]	; 0x48
 8003c38:	e003      	b.n	8003c42 <max_min_filter+0x16e>
	}
	else
	{
		mm_data->max_avr = mm_data->max_new;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	649a      	str	r2, [r3, #72]	; 0x48
	}

	if (mm_data->min_num > 0)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	dd26      	ble.n	8003c98 <max_min_filter+0x1c4>
	{
		mm_data->min_sum = 0;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	645a      	str	r2, [r3, #68]	; 0x44
		for (i = 0; i < mm_data->min_num; i++) // 最大值累加
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	e011      	b.n	8003c7a <max_min_filter+0x1a6>
		{
			mm_data->min_sum = mm_data->min_sum + mm_data->min_value[i];
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c5e:	6839      	ldr	r1, [r7, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	441a      	add	r2, r3
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	645a      	str	r2, [r3, #68]	; 0x44
		for (i = 0; i < mm_data->min_num; i++) // 最大值累加
 8003c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	3301      	adds	r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	73fb      	strb	r3, [r7, #15]
 8003c7a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	429a      	cmp	r2, r3
 8003c84:	dbe7      	blt.n	8003c56 <max_min_filter+0x182>
		}
		mm_data->min_avr = mm_data->min_sum / mm_data->min_num;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c96:	e003      	b.n	8003ca0 <max_min_filter+0x1cc>
	}
	else
	{
		mm_data->min_avr = mm_data->max_new;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	return (mm_data->max_avr + mm_data->min_avr) / 2; // 返回最大最小值的平均值
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca8:	4413      	add	r3, r2
 8003caa:	0fda      	lsrs	r2, r3, #31
 8003cac:	4413      	add	r3, r2
 8003cae:	105b      	asrs	r3, r3, #1
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bc80      	pop	{r7}
 8003cb8:	4770      	bx	lr

08003cba <SPI_Delay_us>:
 */

#include "soft_SPI.h"

void SPI_Delay_us(uint32_t nus)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b085      	sub	sp, #20
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
    uint32_t Delay = nus * 20;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	60fb      	str	r3, [r7, #12]
    do
    {
        __NOP();
 8003cce:	bf00      	nop
    }
    while (Delay --);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1e5a      	subs	r2, r3, #1
 8003cd4:	60fa      	str	r2, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f9      	bne.n	8003cce <SPI_Delay_us+0x14>
}
 8003cda:	bf00      	nop
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <SPI_Delay_ms>:

void SPI_Delay_ms(uint16_t ms)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	4603      	mov	r3, r0
 8003cee:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for(i=0;i<ms;i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	81fb      	strh	r3, [r7, #14]
 8003cf4:	e006      	b.n	8003d04 <SPI_Delay_ms+0x1e>
	{
		SPI_Delay_us(1000);
 8003cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cfa:	f7ff ffde 	bl	8003cba <SPI_Delay_us>
	for(i=0;i<ms;i++)
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	3301      	adds	r3, #1
 8003d02:	81fb      	strh	r3, [r7, #14]
 8003d04:	89fa      	ldrh	r2, [r7, #14]
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d3f4      	bcc.n	8003cf6 <SPI_Delay_ms+0x10>
	}
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
	...

08003d18 <ADC_SPI_Write_Byte>:

//写一个字节数据
void ADC_SPI_Write_Byte(uint8_t dat)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
    uint8_t i;


    for(i=0;i<8;i++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	e024      	b.n	8003d72 <ADC_SPI_Write_Byte+0x5a>
    {
        if(dat&0x80)
 8003d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	da05      	bge.n	8003d3c <ADC_SPI_Write_Byte+0x24>
        {
            ADC_SDI_HIGH();
 8003d30:	2201      	movs	r2, #1
 8003d32:	2180      	movs	r1, #128	; 0x80
 8003d34:	4816      	ldr	r0, [pc, #88]	; (8003d90 <ADC_SPI_Write_Byte+0x78>)
 8003d36:	f7fd fe28 	bl	800198a <HAL_GPIO_WritePin>
 8003d3a:	e004      	b.n	8003d46 <ADC_SPI_Write_Byte+0x2e>
        }
        else
        {
            ADC_SDI_LOW();
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	4813      	ldr	r0, [pc, #76]	; (8003d90 <ADC_SPI_Write_Byte+0x78>)
 8003d42:	f7fd fe22 	bl	800198a <HAL_GPIO_WritePin>
        }
        ADC_SCK_HIGH();
 8003d46:	2201      	movs	r2, #1
 8003d48:	2120      	movs	r1, #32
 8003d4a:	4811      	ldr	r0, [pc, #68]	; (8003d90 <ADC_SPI_Write_Byte+0x78>)
 8003d4c:	f7fd fe1d 	bl	800198a <HAL_GPIO_WritePin>
        SPI_Delay_us(1);
 8003d50:	2001      	movs	r0, #1
 8003d52:	f7ff ffb2 	bl	8003cba <SPI_Delay_us>
        ADC_SCK_LOW();
 8003d56:	2200      	movs	r2, #0
 8003d58:	2120      	movs	r1, #32
 8003d5a:	480d      	ldr	r0, [pc, #52]	; (8003d90 <ADC_SPI_Write_Byte+0x78>)
 8003d5c:	f7fd fe15 	bl	800198a <HAL_GPIO_WritePin>
        SPI_Delay_us(1);
 8003d60:	2001      	movs	r0, #1
 8003d62:	f7ff ffaa 	bl	8003cba <SPI_Delay_us>
		dat <<= 1;
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	71fb      	strb	r3, [r7, #7]
    for(i=0;i<8;i++)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b07      	cmp	r3, #7
 8003d76:	d9d7      	bls.n	8003d28 <ADC_SPI_Write_Byte+0x10>
    }
		 ADC_SDI_LOW();
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2180      	movs	r1, #128	; 0x80
 8003d7c:	4804      	ldr	r0, [pc, #16]	; (8003d90 <ADC_SPI_Write_Byte+0x78>)
 8003d7e:	f7fd fe04 	bl	800198a <HAL_GPIO_WritePin>
		 SPI_Delay_us(1);
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7ff ff99 	bl	8003cba <SPI_Delay_us>
}
 8003d88:	bf00      	nop
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40010800 	.word	0x40010800

08003d94 <ADC_SPI_Write_Data>:

//写数据
void ADC_SPI_Write_Data(uint32_t dat)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    int i;
    uint8_t tmp;

    for(i=3;i>=0;i--)
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e00c      	b.n	8003dbc <ADC_SPI_Write_Data+0x28>
    {
        tmp = (uint8_t) (dat>>(8*i));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dac:	72fb      	strb	r3, [r7, #11]
        ADC_SPI_Write_Byte(tmp);
 8003dae:	7afb      	ldrb	r3, [r7, #11]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff ffb1 	bl	8003d18 <ADC_SPI_Write_Byte>
    for(i=3;i>=0;i--)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	daef      	bge.n	8003da2 <ADC_SPI_Write_Data+0xe>
    }
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <ADC_SPI_Write_Reg>:

//写寄存器
void ADC_SPI_Write_Reg(uint8_t reg,uint32_t dat)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	6039      	str	r1, [r7, #0]
 8003dd6:	71fb      	strb	r3, [r7, #7]
	ADC_SPI_Write_Byte(reg);
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff ff9c 	bl	8003d18 <ADC_SPI_Write_Byte>
	ADC_SPI_Write_Data(dat);
 8003de0:	6838      	ldr	r0, [r7, #0]
 8003de2:	f7ff ffd7 	bl	8003d94 <ADC_SPI_Write_Data>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <ADC_SPI_Read_Byte>:

//读一个字节数据
uint8_t ADC_SPI_Read_Byte(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
    int i;
    uint8_t dat=0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	70fb      	strb	r3, [r7, #3]

		ADC_SDI_LOW();
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2180      	movs	r1, #128	; 0x80
 8003dfe:	481a      	ldr	r0, [pc, #104]	; (8003e68 <ADC_SPI_Read_Byte+0x78>)
 8003e00:	f7fd fdc3 	bl	800198a <HAL_GPIO_WritePin>
//	  SPI_Delay_us(3);
    for(i=0;i<8;i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	e025      	b.n	8003e56 <ADC_SPI_Read_Byte+0x66>
    {
			ADC_SCK_HIGH();
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	2120      	movs	r1, #32
 8003e0e:	4816      	ldr	r0, [pc, #88]	; (8003e68 <ADC_SPI_Read_Byte+0x78>)
 8003e10:	f7fd fdbb 	bl	800198a <HAL_GPIO_WritePin>
			SPI_Delay_us(1);
 8003e14:	2001      	movs	r0, #1
 8003e16:	f7ff ff50 	bl	8003cba <SPI_Delay_us>
			dat <<= 1;
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	70fb      	strb	r3, [r7, #3]
			if(ADC_SDO())
 8003e20:	2140      	movs	r1, #64	; 0x40
 8003e22:	4811      	ldr	r0, [pc, #68]	; (8003e68 <ADC_SPI_Read_Byte+0x78>)
 8003e24:	f7fd fd9a 	bl	800195c <HAL_GPIO_ReadPin>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <ADC_SPI_Read_Byte+0x48>
			{
				dat |= 0x01;
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	70fb      	strb	r3, [r7, #3]
 8003e36:	e003      	b.n	8003e40 <ADC_SPI_Read_Byte+0x50>
			}
			else
			{
				dat &= 0xFE;
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	70fb      	strb	r3, [r7, #3]
			}

			ADC_SCK_LOW();
 8003e40:	2200      	movs	r2, #0
 8003e42:	2120      	movs	r1, #32
 8003e44:	4808      	ldr	r0, [pc, #32]	; (8003e68 <ADC_SPI_Read_Byte+0x78>)
 8003e46:	f7fd fda0 	bl	800198a <HAL_GPIO_WritePin>
			SPI_Delay_us(1);
 8003e4a:	2001      	movs	r0, #1
 8003e4c:	f7ff ff35 	bl	8003cba <SPI_Delay_us>
    for(i=0;i<8;i++)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3301      	adds	r3, #1
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b07      	cmp	r3, #7
 8003e5a:	ddd6      	ble.n	8003e0a <ADC_SPI_Read_Byte+0x1a>
    }

    return dat;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	40010800 	.word	0x40010800

08003e6c <ADC_SPI_Read_Data>:

//读数据
uint32_t ADC_SPI_Read_Data(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t dat=0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	603b      	str	r3, [r7, #0]

    for(i=0;i<4;i++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	71fb      	strb	r3, [r7, #7]
 8003e7a:	e00c      	b.n	8003e96 <ADC_SPI_Read_Data+0x2a>
    {
        dat <<= 8;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	603b      	str	r3, [r7, #0]
        dat |= ADC_SPI_Read_Byte();
 8003e82:	f7ff ffb5 	bl	8003df0 <ADC_SPI_Read_Byte>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	603b      	str	r3, [r7, #0]
    for(i=0;i<4;i++)
 8003e90:	79fb      	ldrb	r3, [r7, #7]
 8003e92:	3301      	adds	r3, #1
 8003e94:	71fb      	strb	r3, [r7, #7]
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d9ef      	bls.n	8003e7c <ADC_SPI_Read_Data+0x10>
    }

    return dat;
 8003e9c:	683b      	ldr	r3, [r7, #0]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <ADC_SPI_Read_Reg>:

//读寄存器
uint32_t ADC_SPI_Read_Reg(uint8_t reg)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
    uint32_t dat;

    ADC_SPI_Write_Byte(reg);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff2f 	bl	8003d18 <ADC_SPI_Write_Byte>
	  ADC_SDI_LOW();
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	4805      	ldr	r0, [pc, #20]	; (8003ed4 <ADC_SPI_Read_Reg+0x2c>)
 8003ec0:	f7fd fd63 	bl	800198a <HAL_GPIO_WritePin>
    dat = ADC_SPI_Read_Data();
 8003ec4:	f7ff ffd2 	bl	8003e6c <ADC_SPI_Read_Data>
 8003ec8:	60f8      	str	r0, [r7, #12]

    return dat;
 8003eca:	68fb      	ldr	r3, [r7, #12]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	40010800 	.word	0x40010800

08003ed8 <message_set_zero>:
const uint32_t firm_version = (USER_FIRM_VERSION_HH << 16 | USER_FIRM_VERSION_H << 8 | USER_FIRM_VERSION_L);

uint8_t modbus_tx_buf[30];
uint16_t tx_crc = 0;
void message_set_zero(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0


	CS5530_set_zero_offset();
 8003edc:	f7ff fd3e 	bl	800395c <CS5530_set_zero_offset>

	modbus_tx_buf[0] = modbus.Slave_addr;
 8003ee0:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <message_set_zero+0x64>)
 8003ee2:	781a      	ldrb	r2, [r3, #0]
 8003ee4:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <message_set_zero+0x68>)
 8003ee6:	701a      	strb	r2, [r3, #0]
	modbus_tx_buf[1] = 0x06;
 8003ee8:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <message_set_zero+0x68>)
 8003eea:	2206      	movs	r2, #6
 8003eec:	705a      	strb	r2, [r3, #1]
	modbus_tx_buf[2] = 0;
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <message_set_zero+0x68>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	709a      	strb	r2, [r3, #2]
	modbus_tx_buf[3] = 1;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <message_set_zero+0x68>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	70da      	strb	r2, [r3, #3]
	modbus_tx_buf[4] = 0;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <message_set_zero+0x68>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	711a      	strb	r2, [r3, #4]
	modbus_tx_buf[5] = 0;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <message_set_zero+0x68>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	715a      	strb	r2, [r3, #5]
	tx_crc = CRC_CHECK(modbus_tx_buf, 6);
 8003f06:	2106      	movs	r1, #6
 8003f08:	480d      	ldr	r0, [pc, #52]	; (8003f40 <message_set_zero+0x68>)
 8003f0a:	f000 f9bf 	bl	800428c <CRC_CHECK>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <message_set_zero+0x6c>)
 8003f14:	801a      	strh	r2, [r3, #0]
	modbus_tx_buf[6] = tx_crc ;
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <message_set_zero+0x6c>)
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <message_set_zero+0x68>)
 8003f1e:	719a      	strb	r2, [r3, #6]
	modbus_tx_buf[7] = tx_crc >> 8;
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <message_set_zero+0x6c>)
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	0a1b      	lsrs	r3, r3, #8
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <message_set_zero+0x68>)
 8003f2c:	71da      	strb	r2, [r3, #7]
	modbus_send_packet(modbus_tx_buf, 8);
 8003f2e:	2108      	movs	r1, #8
 8003f30:	4803      	ldr	r0, [pc, #12]	; (8003f40 <message_set_zero+0x68>)
 8003f32:	f000 fb2f 	bl	8004594 <modbus_send_packet>
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20000248 	.word	0x20000248
 8003f40:	20000228 	.word	0x20000228
 8003f44:	20000246 	.word	0x20000246

08003f48 <message_standardization>:

void message_standardization(float data)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	uint16_t reg_data=0;
 8003f50:	2300      	movs	r3, #0
 8003f52:	81fb      	strh	r3, [r7, #14]
	uint8_t ack_reg=0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	737b      	strb	r3, [r7, #13]

	CS5530_standardization(data);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fd21 	bl	80039a0 <CS5530_standardization>


	modbus_tx_buf[0] = modbus.Slave_addr;
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <message_standardization+0x7c>)
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	4b19      	ldr	r3, [pc, #100]	; (8003fc8 <message_standardization+0x80>)
 8003f64:	701a      	strb	r2, [r3, #0]
	modbus_tx_buf[1] = 0x06;
 8003f66:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <message_standardization+0x80>)
 8003f68:	2206      	movs	r2, #6
 8003f6a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buf[2] = 0;
 8003f6c:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <message_standardization+0x80>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	709a      	strb	r2, [r3, #2]
	modbus_tx_buf[3] = 5;
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <message_standardization+0x80>)
 8003f74:	2205      	movs	r2, #5
 8003f76:	70da      	strb	r2, [r3, #3]
	modbus_tx_buf[4] = reg_data>>8;
 8003f78:	89fb      	ldrh	r3, [r7, #14]
 8003f7a:	0a1b      	lsrs	r3, r3, #8
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <message_standardization+0x80>)
 8003f82:	711a      	strb	r2, [r3, #4]
	modbus_tx_buf[5] = reg_data;
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <message_standardization+0x80>)
 8003f8a:	715a      	strb	r2, [r3, #5]
	tx_crc = CRC_CHECK(modbus_tx_buf, 6);
 8003f8c:	2106      	movs	r1, #6
 8003f8e:	480e      	ldr	r0, [pc, #56]	; (8003fc8 <message_standardization+0x80>)
 8003f90:	f000 f97c 	bl	800428c <CRC_CHECK>
 8003f94:	4603      	mov	r3, r0
 8003f96:	461a      	mov	r2, r3
 8003f98:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <message_standardization+0x84>)
 8003f9a:	801a      	strh	r2, [r3, #0]
	modbus_tx_buf[6] = tx_crc ;
 8003f9c:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <message_standardization+0x84>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <message_standardization+0x80>)
 8003fa4:	719a      	strb	r2, [r3, #6]
	modbus_tx_buf[7] = tx_crc >> 8;
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <message_standardization+0x84>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	0a1b      	lsrs	r3, r3, #8
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <message_standardization+0x80>)
 8003fb2:	71da      	strb	r2, [r3, #7]
	modbus_send_packet(modbus_tx_buf, 8);
 8003fb4:	2108      	movs	r1, #8
 8003fb6:	4804      	ldr	r0, [pc, #16]	; (8003fc8 <message_standardization+0x80>)
 8003fb8:	f000 faec 	bl	8004594 <modbus_send_packet>
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	20000248 	.word	0x20000248
 8003fc8:	20000228 	.word	0x20000228
 8003fcc:	20000246 	.word	0x20000246

08003fd0 <message_standardization32>:
void message_standardization32(float data)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
	CS5530_standardization(data);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff fce1 	bl	80039a0 <CS5530_standardization>

	modbus_tx_buf[0] = modbus.Slave_addr;
 8003fde:	4b17      	ldr	r3, [pc, #92]	; (800403c <message_standardization32+0x6c>)
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	4b17      	ldr	r3, [pc, #92]	; (8004040 <message_standardization32+0x70>)
 8003fe4:	701a      	strb	r2, [r3, #0]
	modbus_tx_buf[1] = 0x10;
 8003fe6:	4b16      	ldr	r3, [pc, #88]	; (8004040 <message_standardization32+0x70>)
 8003fe8:	2210      	movs	r2, #16
 8003fea:	705a      	strb	r2, [r3, #1]
	modbus_tx_buf[2] = 0;
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <message_standardization32+0x70>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	709a      	strb	r2, [r3, #2]
	modbus_tx_buf[3] = 5;
 8003ff2:	4b13      	ldr	r3, [pc, #76]	; (8004040 <message_standardization32+0x70>)
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	70da      	strb	r2, [r3, #3]
	modbus_tx_buf[4] = 0;
 8003ff8:	4b11      	ldr	r3, [pc, #68]	; (8004040 <message_standardization32+0x70>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	711a      	strb	r2, [r3, #4]
	modbus_tx_buf[5] = 2;
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <message_standardization32+0x70>)
 8004000:	2202      	movs	r2, #2
 8004002:	715a      	strb	r2, [r3, #5]
	tx_crc = CRC_CHECK(modbus_tx_buf, 6);
 8004004:	2106      	movs	r1, #6
 8004006:	480e      	ldr	r0, [pc, #56]	; (8004040 <message_standardization32+0x70>)
 8004008:	f000 f940 	bl	800428c <CRC_CHECK>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <message_standardization32+0x74>)
 8004012:	801a      	strh	r2, [r3, #0]
	modbus_tx_buf[6] = tx_crc ;
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <message_standardization32+0x74>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4b09      	ldr	r3, [pc, #36]	; (8004040 <message_standardization32+0x70>)
 800401c:	719a      	strb	r2, [r3, #6]
	modbus_tx_buf[7] = tx_crc >> 8;
 800401e:	4b09      	ldr	r3, [pc, #36]	; (8004044 <message_standardization32+0x74>)
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	0a1b      	lsrs	r3, r3, #8
 8004024:	b29b      	uxth	r3, r3
 8004026:	b2da      	uxtb	r2, r3
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <message_standardization32+0x70>)
 800402a:	71da      	strb	r2, [r3, #7]
	modbus_send_packet(modbus_tx_buf, 8);
 800402c:	2108      	movs	r1, #8
 800402e:	4804      	ldr	r0, [pc, #16]	; (8004040 <message_standardization32+0x70>)
 8004030:	f000 fab0 	bl	8004594 <modbus_send_packet>
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000248 	.word	0x20000248
 8004040:	20000228 	.word	0x20000228
 8004044:	20000246 	.word	0x20000246

08004048 <message_send_weight>:

void message_send_weight(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
	int32_t message_weight;
	float wei_f=0;
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	607b      	str	r3, [r7, #4]


	wei_f=ADC.weight_value;
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <message_send_weight+0x98>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	607b      	str	r3, [r7, #4]
	message_weight = (int32_t)(wei_f*1000.0f);
 800405a:	4922      	ldr	r1, [pc, #136]	; (80040e4 <message_send_weight+0x9c>)
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7fc f983 	bl	8000368 <__aeabi_fmul>
 8004062:	4603      	mov	r3, r0
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc facf 	bl	8000608 <__aeabi_f2iz>
 800406a:	4603      	mov	r3, r0
 800406c:	603b      	str	r3, [r7, #0]


	modbus_tx_buf[0] = modbus.Slave_addr;
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <message_send_weight+0xa0>)
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <message_send_weight+0xa4>)
 8004074:	701a      	strb	r2, [r3, #0]
	modbus_tx_buf[1] = 0x03;
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <message_send_weight+0xa4>)
 8004078:	2203      	movs	r2, #3
 800407a:	705a      	strb	r2, [r3, #1]
	modbus_tx_buf[2] = 4;
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <message_send_weight+0xa4>)
 800407e:	2204      	movs	r2, #4
 8004080:	709a      	strb	r2, [r3, #2]
	modbus_tx_buf[3] = message_weight >> 24;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	161b      	asrs	r3, r3, #24
 8004086:	b2da      	uxtb	r2, r3
 8004088:	4b18      	ldr	r3, [pc, #96]	; (80040ec <message_send_weight+0xa4>)
 800408a:	70da      	strb	r2, [r3, #3]
	modbus_tx_buf[4] = message_weight >> 16;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	141b      	asrs	r3, r3, #16
 8004090:	b2da      	uxtb	r2, r3
 8004092:	4b16      	ldr	r3, [pc, #88]	; (80040ec <message_send_weight+0xa4>)
 8004094:	711a      	strb	r2, [r3, #4]
	modbus_tx_buf[5] = message_weight >> 8;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	121b      	asrs	r3, r3, #8
 800409a:	b2da      	uxtb	r2, r3
 800409c:	4b13      	ldr	r3, [pc, #76]	; (80040ec <message_send_weight+0xa4>)
 800409e:	715a      	strb	r2, [r3, #5]
	modbus_tx_buf[6] = message_weight;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <message_send_weight+0xa4>)
 80040a6:	719a      	strb	r2, [r3, #6]
	tx_crc = CRC_CHECK(modbus_tx_buf, 7);
 80040a8:	2107      	movs	r1, #7
 80040aa:	4810      	ldr	r0, [pc, #64]	; (80040ec <message_send_weight+0xa4>)
 80040ac:	f000 f8ee 	bl	800428c <CRC_CHECK>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b0e      	ldr	r3, [pc, #56]	; (80040f0 <message_send_weight+0xa8>)
 80040b6:	801a      	strh	r2, [r3, #0]
	modbus_tx_buf[7] = tx_crc ;
 80040b8:	4b0d      	ldr	r3, [pc, #52]	; (80040f0 <message_send_weight+0xa8>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <message_send_weight+0xa4>)
 80040c0:	71da      	strb	r2, [r3, #7]
	modbus_tx_buf[8] = tx_crc >> 8;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <message_send_weight+0xa8>)
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <message_send_weight+0xa4>)
 80040ce:	721a      	strb	r2, [r3, #8]
	modbus_send_packet(modbus_tx_buf, 9);
 80040d0:	2109      	movs	r1, #9
 80040d2:	4806      	ldr	r0, [pc, #24]	; (80040ec <message_send_weight+0xa4>)
 80040d4:	f000 fa5e 	bl	8004594 <modbus_send_packet>
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000170 	.word	0x20000170
 80040e4:	447a0000 	.word	0x447a0000
 80040e8:	20000248 	.word	0x20000248
 80040ec:	20000228 	.word	0x20000228
 80040f0:	20000246 	.word	0x20000246

080040f4 <message_send_AD>:


void message_send_AD(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
	int32_t message_AD;

		message_AD = ADC.AD_value;;
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <message_send_AD+0x80>)
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	607b      	str	r3, [r7, #4]

		modbus_tx_buf[0] = modbus.Slave_addr;
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <message_send_AD+0x84>)
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <message_send_AD+0x88>)
 8004106:	701a      	strb	r2, [r3, #0]
		modbus_tx_buf[1] = 0x03;
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <message_send_AD+0x88>)
 800410a:	2203      	movs	r2, #3
 800410c:	705a      	strb	r2, [r3, #1]
		modbus_tx_buf[2] = 4;
 800410e:	4b1b      	ldr	r3, [pc, #108]	; (800417c <message_send_AD+0x88>)
 8004110:	2204      	movs	r2, #4
 8004112:	709a      	strb	r2, [r3, #2]
		modbus_tx_buf[3] = message_AD >> 24;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	161b      	asrs	r3, r3, #24
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4b18      	ldr	r3, [pc, #96]	; (800417c <message_send_AD+0x88>)
 800411c:	70da      	strb	r2, [r3, #3]
		modbus_tx_buf[4] = message_AD >> 16;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	141b      	asrs	r3, r3, #16
 8004122:	b2da      	uxtb	r2, r3
 8004124:	4b15      	ldr	r3, [pc, #84]	; (800417c <message_send_AD+0x88>)
 8004126:	711a      	strb	r2, [r3, #4]
		modbus_tx_buf[5] = message_AD >> 8;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	121b      	asrs	r3, r3, #8
 800412c:	b2da      	uxtb	r2, r3
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <message_send_AD+0x88>)
 8004130:	715a      	strb	r2, [r3, #5]
		modbus_tx_buf[6] = message_AD;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	b2da      	uxtb	r2, r3
 8004136:	4b11      	ldr	r3, [pc, #68]	; (800417c <message_send_AD+0x88>)
 8004138:	719a      	strb	r2, [r3, #6]
		tx_crc = CRC_CHECK(modbus_tx_buf, 7);
 800413a:	2107      	movs	r1, #7
 800413c:	480f      	ldr	r0, [pc, #60]	; (800417c <message_send_AD+0x88>)
 800413e:	f000 f8a5 	bl	800428c <CRC_CHECK>
 8004142:	4603      	mov	r3, r0
 8004144:	461a      	mov	r2, r3
 8004146:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <message_send_AD+0x8c>)
 8004148:	801a      	strh	r2, [r3, #0]
		modbus_tx_buf[7] = tx_crc ;
 800414a:	4b0d      	ldr	r3, [pc, #52]	; (8004180 <message_send_AD+0x8c>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b2da      	uxtb	r2, r3
 8004150:	4b0a      	ldr	r3, [pc, #40]	; (800417c <message_send_AD+0x88>)
 8004152:	71da      	strb	r2, [r3, #7]
		modbus_tx_buf[8] = tx_crc >> 8;
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <message_send_AD+0x8c>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	0a1b      	lsrs	r3, r3, #8
 800415a:	b29b      	uxth	r3, r3
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <message_send_AD+0x88>)
 8004160:	721a      	strb	r2, [r3, #8]
		modbus_send_packet(modbus_tx_buf, 9);
 8004162:	2109      	movs	r1, #9
 8004164:	4805      	ldr	r0, [pc, #20]	; (800417c <message_send_AD+0x88>)
 8004166:	f000 fa15 	bl	8004594 <modbus_send_packet>

}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000170 	.word	0x20000170
 8004178:	20000248 	.word	0x20000248
 800417c:	20000228 	.word	0x20000228
 8004180:	20000246 	.word	0x20000246

08004184 <message_send_version>:
void message_send_version(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
	uint32_t temp32=0;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
	temp32=firm_version;
 800418e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004192:	607b      	str	r3, [r7, #4]
		modbus_tx_buf[0] = modbus.Slave_addr;
 8004194:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <message_send_version+0x84>)
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	4b1c      	ldr	r3, [pc, #112]	; (800420c <message_send_version+0x88>)
 800419a:	701a      	strb	r2, [r3, #0]
		modbus_tx_buf[1] = 0x03;
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <message_send_version+0x88>)
 800419e:	2203      	movs	r2, #3
 80041a0:	705a      	strb	r2, [r3, #1]
		modbus_tx_buf[2] = 4;
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <message_send_version+0x88>)
 80041a4:	2204      	movs	r2, #4
 80041a6:	709a      	strb	r2, [r3, #2]
		modbus_tx_buf[3] = temp32 >> 24;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	0e1b      	lsrs	r3, r3, #24
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	4b17      	ldr	r3, [pc, #92]	; (800420c <message_send_version+0x88>)
 80041b0:	70da      	strb	r2, [r3, #3]
		modbus_tx_buf[4] = temp32 >> 16;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	4b14      	ldr	r3, [pc, #80]	; (800420c <message_send_version+0x88>)
 80041ba:	711a      	strb	r2, [r3, #4]
		modbus_tx_buf[5] = temp32 >> 8;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <message_send_version+0x88>)
 80041c4:	715a      	strb	r2, [r3, #5]
		modbus_tx_buf[6] = temp32;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b10      	ldr	r3, [pc, #64]	; (800420c <message_send_version+0x88>)
 80041cc:	719a      	strb	r2, [r3, #6]
		tx_crc = CRC_CHECK(modbus_tx_buf, 7);
 80041ce:	2107      	movs	r1, #7
 80041d0:	480e      	ldr	r0, [pc, #56]	; (800420c <message_send_version+0x88>)
 80041d2:	f000 f85b 	bl	800428c <CRC_CHECK>
 80041d6:	4603      	mov	r3, r0
 80041d8:	461a      	mov	r2, r3
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <message_send_version+0x8c>)
 80041dc:	801a      	strh	r2, [r3, #0]
		modbus_tx_buf[7] = tx_crc ;
 80041de:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <message_send_version+0x8c>)
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <message_send_version+0x88>)
 80041e6:	71da      	strb	r2, [r3, #7]
		modbus_tx_buf[8] = tx_crc >> 8;
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <message_send_version+0x8c>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b06      	ldr	r3, [pc, #24]	; (800420c <message_send_version+0x88>)
 80041f4:	721a      	strb	r2, [r3, #8]
		modbus_send_packet(modbus_tx_buf, 9);
 80041f6:	2109      	movs	r1, #9
 80041f8:	4804      	ldr	r0, [pc, #16]	; (800420c <message_send_version+0x88>)
 80041fa:	f000 f9cb 	bl	8004594 <modbus_send_packet>
}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000248 	.word	0x20000248
 800420c:	20000228 	.word	0x20000228
 8004210:	20000246 	.word	0x20000246

08004214 <message_set_address>:
		modbus_tx_buf[8] = tx_crc >> 8;
		modbus_send_packet(modbus_tx_buf, 9);
}

void message_set_address(uint8_t addr)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	71fb      	strb	r3, [r7, #7]
	set_modbus_address(addr);
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fa3b 	bl	800469c <set_modbus_address>
	modbus_tx_buf[0] = modbus.Slave_addr;
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <message_set_address+0x6c>)
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <message_set_address+0x70>)
 800422c:	701a      	strb	r2, [r3, #0]
	modbus_tx_buf[1] = 0x06;
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <message_set_address+0x70>)
 8004230:	2206      	movs	r2, #6
 8004232:	705a      	strb	r2, [r3, #1]
	modbus_tx_buf[2] = 0;
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <message_set_address+0x70>)
 8004236:	2200      	movs	r2, #0
 8004238:	709a      	strb	r2, [r3, #2]
	modbus_tx_buf[3] = 0x12;
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <message_set_address+0x70>)
 800423c:	2212      	movs	r2, #18
 800423e:	70da      	strb	r2, [r3, #3]
	modbus_tx_buf[4] = addr;
 8004240:	4a10      	ldr	r2, [pc, #64]	; (8004284 <message_set_address+0x70>)
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	7113      	strb	r3, [r2, #4]
	tx_crc = CRC_CHECK(modbus_tx_buf, 6);
 8004246:	2106      	movs	r1, #6
 8004248:	480e      	ldr	r0, [pc, #56]	; (8004284 <message_set_address+0x70>)
 800424a:	f000 f81f 	bl	800428c <CRC_CHECK>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	4b0d      	ldr	r3, [pc, #52]	; (8004288 <message_set_address+0x74>)
 8004254:	801a      	strh	r2, [r3, #0]
	modbus_tx_buf[5] = tx_crc ;
 8004256:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <message_set_address+0x74>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b09      	ldr	r3, [pc, #36]	; (8004284 <message_set_address+0x70>)
 800425e:	715a      	strb	r2, [r3, #5]
	modbus_tx_buf[6] = tx_crc >> 8 ;
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <message_set_address+0x74>)
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	b29b      	uxth	r3, r3
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <message_set_address+0x70>)
 800426c:	719a      	strb	r2, [r3, #6]
	modbus_send_packet(modbus_tx_buf, 7);
 800426e:	2107      	movs	r1, #7
 8004270:	4804      	ldr	r0, [pc, #16]	; (8004284 <message_set_address+0x70>)
 8004272:	f000 f98f 	bl	8004594 <modbus_send_packet>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000248 	.word	0x20000248
 8004284:	20000228 	.word	0x20000228
 8004288:	20000246 	.word	0x20000246

0800428c <CRC_CHECK>:
//	return (CRC_Temp);
//}

// 计算 Modbus RTU CRC 校验码
uint16_t CRC_CHECK(uint8_t *data, uint8_t length)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	70fb      	strb	r3, [r7, #3]
    uint16_t crc = 0xFFFF;
 8004298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800429c:	82fb      	strh	r3, [r7, #22]

    for (size_t i = 0; i < length; ++i) {
 800429e:	2300      	movs	r3, #0
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	e026      	b.n	80042f2 <CRC_CHECK+0x66>
        crc ^= data[i];
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	8afb      	ldrh	r3, [r7, #22]
 80042b0:	4053      	eors	r3, r2
 80042b2:	82fb      	strh	r3, [r7, #22]

        for (int j = 0; j < 8; ++j) {
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	e015      	b.n	80042e6 <CRC_CHECK+0x5a>
            if (crc & 0x0001) {
 80042ba:	8afb      	ldrh	r3, [r7, #22]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <CRC_CHECK+0x4e>
                crc >>= 1;
 80042c4:	8afb      	ldrh	r3, [r7, #22]
 80042c6:	085b      	lsrs	r3, r3, #1
 80042c8:	82fb      	strh	r3, [r7, #22]
                crc ^= 0xA001;
 80042ca:	8afb      	ldrh	r3, [r7, #22]
 80042cc:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80042d0:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80042d4:	43db      	mvns	r3, r3
 80042d6:	82fb      	strh	r3, [r7, #22]
 80042d8:	e002      	b.n	80042e0 <CRC_CHECK+0x54>
            } else {
                crc >>= 1;
 80042da:	8afb      	ldrh	r3, [r7, #22]
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	82fb      	strh	r3, [r7, #22]
        for (int j = 0; j < 8; ++j) {
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	3301      	adds	r3, #1
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b07      	cmp	r3, #7
 80042ea:	dde6      	ble.n	80042ba <CRC_CHECK+0x2e>
    for (size_t i = 0; i < length; ++i) {
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	3301      	adds	r3, #1
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	78fb      	ldrb	r3, [r7, #3]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d3d4      	bcc.n	80042a4 <CRC_CHECK+0x18>
            }
        }
    }

    return crc;
 80042fa:	8afb      	ldrh	r3, [r7, #22]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
	...

08004308 <Modbud_fun_03>:

void Modbud_fun_03(uint16_t reg_addr) // 3号功能码处理  ---查询功能
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
	switch (reg_addr)
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	2b14      	cmp	r3, #20
 8004316:	dc1f      	bgt.n	8004358 <Modbud_fun_03+0x50>
 8004318:	2b09      	cmp	r3, #9
 800431a:	db2a      	blt.n	8004372 <Modbud_fun_03+0x6a>
 800431c:	3b09      	subs	r3, #9
 800431e:	2b0b      	cmp	r3, #11
 8004320:	d827      	bhi.n	8004372 <Modbud_fun_03+0x6a>
 8004322:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <Modbud_fun_03+0x20>)
 8004324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004328:	0800435f 	.word	0x0800435f
 800432c:	08004373 	.word	0x08004373
 8004330:	08004371 	.word	0x08004371
 8004334:	08004373 	.word	0x08004373
 8004338:	08004373 	.word	0x08004373
 800433c:	08004373 	.word	0x08004373
 8004340:	08004373 	.word	0x08004373
 8004344:	08004373 	.word	0x08004373
 8004348:	08004365 	.word	0x08004365
 800434c:	08004373 	.word	0x08004373
 8004350:	08004373 	.word	0x08004373
 8004354:	08004371 	.word	0x08004371
 8004358:	2b90      	cmp	r3, #144	; 0x90
 800435a:	d006      	beq.n	800436a <Modbud_fun_03+0x62>
			break;
	case 0x0090: //
		message_send_version();
		break;
	}
}
 800435c:	e009      	b.n	8004372 <Modbud_fun_03+0x6a>
		message_send_weight();
 800435e:	f7ff fe73 	bl	8004048 <message_send_weight>
		break;
 8004362:	e006      	b.n	8004372 <Modbud_fun_03+0x6a>
		message_send_AD();
 8004364:	f7ff fec6 	bl	80040f4 <message_send_AD>
		break;
 8004368:	e003      	b.n	8004372 <Modbud_fun_03+0x6a>
		message_send_version();
 800436a:	f7ff ff0b 	bl	8004184 <message_send_version>
		break;
 800436e:	e000      	b.n	8004372 <Modbud_fun_03+0x6a>
		break;
 8004370:	bf00      	nop
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop

0800437c <Modbud_fun_06>:

void Modbud_fun_06(uint16_t reg_addr) // 6号功能码处理  修改功能
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	4603      	mov	r3, r0
 8004384:	80fb      	strh	r3, [r7, #6]
	switch (reg_addr)
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	3b01      	subs	r3, #1
 800438a:	2b11      	cmp	r3, #17
 800438c:	d83e      	bhi.n	800440c <Modbud_fun_06+0x90>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <Modbud_fun_06+0x18>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043dd 	.word	0x080043dd
 8004398:	080043e3 	.word	0x080043e3
 800439c:	0800440d 	.word	0x0800440d
 80043a0:	0800440d 	.word	0x0800440d
 80043a4:	080043e9 	.word	0x080043e9
 80043a8:	0800440d 	.word	0x0800440d
 80043ac:	0800440b 	.word	0x0800440b
 80043b0:	0800440d 	.word	0x0800440d
 80043b4:	0800440d 	.word	0x0800440d
 80043b8:	0800440d 	.word	0x0800440d
 80043bc:	0800440d 	.word	0x0800440d
 80043c0:	0800440d 	.word	0x0800440d
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	0800440d 	.word	0x0800440d
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	080043fd 	.word	0x080043fd
	{
	case 0x0001: // 零点校准
		message_set_zero();
 80043dc:	f7ff fd7c 	bl	8003ed8 <message_set_zero>
		break;
 80043e0:	e014      	b.n	800440c <Modbud_fun_06+0x90>
	case 0x0002: // 零点校准
		message_set_zero();
 80043e2:	f7ff fd79 	bl	8003ed8 <message_set_zero>
		break;
 80043e6:	e011      	b.n	800440c <Modbud_fun_06+0x90>
	case 0x0005: // 通道1 重量标定
		message_standardization(modbus.write_data);
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <Modbud_fun_06+0x98>)
 80043ea:	8b9b      	ldrh	r3, [r3, #28]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fb ff63 	bl	80002b8 <__aeabi_ui2f>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fda7 	bl	8003f48 <message_standardization>
		break;
 80043fa:	e007      	b.n	800440c <Modbud_fun_06+0x90>
	case 0x0007: // 通道2 重量标定
//		message_standardization(modbus.write_data);
		break;
	case 0x0012: // 地址修改
		message_set_address(modbus.write_data);
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <Modbud_fun_06+0x98>)
 80043fe:	8b9b      	ldrh	r3, [r3, #28]
 8004400:	b2db      	uxtb	r3, r3
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff ff06 	bl	8004214 <message_set_address>
		break;
 8004408:	e000      	b.n	800440c <Modbud_fun_06+0x90>
		break;
 800440a:	bf00      	nop
	}
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000248 	.word	0x20000248

08004418 <Modbud_fun_10>:

void Modbud_fun_10(uint16_t reg_addr) // 16号功能码处理  修改多个寄存器功能
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	80fb      	strh	r3, [r7, #6]
	float temp_f=0;
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	60fb      	str	r3, [r7, #12]
	switch (reg_addr)
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d002      	beq.n	8004434 <Modbud_fun_10+0x1c>
 800442e:	2b07      	cmp	r3, #7
 8004430:	d00b      	beq.n	800444a <Modbud_fun_10+0x32>
					break;
//		case 0x0012: // 地址修改
//			message_set_address(modbus.write_data);
//			break;
		}
}
 8004432:	e015      	b.n	8004460 <Modbud_fun_10+0x48>
			temp_f=(float)modbus.write_data32;
 8004434:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <Modbud_fun_10+0x50>)
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fb ff3d 	bl	80002b8 <__aeabi_ui2f>
 800443e:	4603      	mov	r3, r0
 8004440:	60fb      	str	r3, [r7, #12]
			message_standardization32(temp_f);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7ff fdc4 	bl	8003fd0 <message_standardization32>
			break;
 8004448:	e00a      	b.n	8004460 <Modbud_fun_10+0x48>
			temp_f=(float)modbus.write_data32;
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <Modbud_fun_10+0x50>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fb ff32 	bl	80002b8 <__aeabi_ui2f>
 8004454:	4603      	mov	r3, r0
 8004456:	60fb      	str	r3, [r7, #12]
			message_standardization32(temp_f);
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff fdb9 	bl	8003fd0 <message_standardization32>
					break;
 800445e:	bf00      	nop
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	20000248 	.word	0x20000248

0800446c <modbus_receive_packet>:

uint8_t modbus_receive_packet(uint8_t *rx_data)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	uint16_t crc = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	81fb      	strh	r3, [r7, #14]
	uint16_t rc_crc = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	81bb      	strh	r3, [r7, #12]
	//  uint16_t reg_addr ;

	crc = CRC_CHECK(rx_data, modbus.ReceiveCount - 2);									   // 计算校验码
 800447c:	4b44      	ldr	r3, [pc, #272]	; (8004590 <modbus_receive_packet+0x124>)
 800447e:	7d5b      	ldrb	r3, [r3, #21]
 8004480:	3b02      	subs	r3, #2
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff ff00 	bl	800428c <CRC_CHECK>
 800448c:	4603      	mov	r3, r0
 800448e:	81fb      	strh	r3, [r7, #14]
	rc_crc = (rx_data[modbus.ReceiveCount - 1] << 8) + (rx_data[modbus.ReceiveCount - 2]); // 收到的校验码
 8004490:	4b3f      	ldr	r3, [pc, #252]	; (8004590 <modbus_receive_packet+0x124>)
 8004492:	7d5b      	ldrb	r3, [r3, #21]
 8004494:	3b01      	subs	r3, #1
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	4413      	add	r3, r2
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	021b      	lsls	r3, r3, #8
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	4b3b      	ldr	r3, [pc, #236]	; (8004590 <modbus_receive_packet+0x124>)
 80044a4:	7d5b      	ldrb	r3, [r3, #21]
 80044a6:	3b02      	subs	r3, #2
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	440b      	add	r3, r1
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	4413      	add	r3, r2
 80044b2:	81bb      	strh	r3, [r7, #12]
	if (crc != rc_crc)
 80044b4:	89fa      	ldrh	r2, [r7, #14]
 80044b6:	89bb      	ldrh	r3, [r7, #12]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <modbus_receive_packet+0x54>
	{
		return 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	e063      	b.n	8004588 <modbus_receive_packet+0x11c>
	}
	if (rx_data[0] == modbus.Slave_addr)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	781a      	ldrb	r2, [r3, #0]
 80044c4:	4b32      	ldr	r3, [pc, #200]	; (8004590 <modbus_receive_packet+0x124>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d15c      	bne.n	8004586 <modbus_receive_packet+0x11a>
	{
		modbus.reg_addr = (rx_data[2] << 8) + rx_data[3];
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3302      	adds	r3, #2
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	021b      	lsls	r3, r3, #8
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3303      	adds	r3, #3
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	4413      	add	r3, r2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <modbus_receive_packet+0x124>)
 80044e6:	835a      	strh	r2, [r3, #26]
		switch (rx_data[1])
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3301      	adds	r3, #1
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b10      	cmp	r3, #16
 80044f0:	d02e      	beq.n	8004550 <modbus_receive_packet+0xe4>
 80044f2:	2b10      	cmp	r3, #16
 80044f4:	dc47      	bgt.n	8004586 <modbus_receive_packet+0x11a>
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d002      	beq.n	8004500 <modbus_receive_packet+0x94>
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d014      	beq.n	8004528 <modbus_receive_packet+0xbc>
 80044fe:	e042      	b.n	8004586 <modbus_receive_packet+0x11a>
		{
		case 0x03: // 读取多个寄存器
			modbus.read_data_num = (rx_data[4] << 8) + rx_data[5];
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3304      	adds	r3, #4
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b29b      	uxth	r3, r3
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	b29a      	uxth	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3305      	adds	r3, #5
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	4413      	add	r3, r2
 8004516:	b29a      	uxth	r2, r3
 8004518:	4b1d      	ldr	r3, [pc, #116]	; (8004590 <modbus_receive_packet+0x124>)
 800451a:	849a      	strh	r2, [r3, #36]	; 0x24
			Modbud_fun_03(modbus.reg_addr);
 800451c:	4b1c      	ldr	r3, [pc, #112]	; (8004590 <modbus_receive_packet+0x124>)
 800451e:	8b5b      	ldrh	r3, [r3, #26]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fef1 	bl	8004308 <Modbud_fun_03>
			break;
 8004526:	e02e      	b.n	8004586 <modbus_receive_packet+0x11a>

		case 0x06: // 读取多个输入寄存器
			modbus.write_data = (rx_data[4] << 8) + rx_data[5];
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3305      	adds	r3, #5
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	4413      	add	r3, r2
 800453e:	b29a      	uxth	r2, r3
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <modbus_receive_packet+0x124>)
 8004542:	839a      	strh	r2, [r3, #28]
			Modbud_fun_06(modbus.reg_addr);
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <modbus_receive_packet+0x124>)
 8004546:	8b5b      	ldrh	r3, [r3, #26]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff17 	bl	800437c <Modbud_fun_06>
			break;
 800454e:	e01a      	b.n	8004586 <modbus_receive_packet+0x11a>

		case 0x10: // 写入单个寄存器
			modbus.write_data32 = (rx_data[7] << 24) +(rx_data[8] << 16)+(rx_data[9] << 8) + rx_data[10];
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3307      	adds	r3, #7
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	061a      	lsls	r2, r3, #24
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3308      	adds	r3, #8
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	041b      	lsls	r3, r3, #16
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3309      	adds	r3, #9
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	021b      	lsls	r3, r3, #8
 800456a:	4413      	add	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	320a      	adds	r2, #10
 8004570:	7812      	ldrb	r2, [r2, #0]
 8004572:	4413      	add	r3, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <modbus_receive_packet+0x124>)
 8004578:	621a      	str	r2, [r3, #32]
			Modbud_fun_10(modbus.reg_addr);
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <modbus_receive_packet+0x124>)
 800457c:	8b5b      	ldrh	r3, [r3, #26]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff ff4a 	bl	8004418 <Modbud_fun_10>
			break;
 8004584:	bf00      	nop
		}
	}
	else if (rx_data[0] == 0) // 广播地址
	{
	}
	return 0;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000248 	.word	0x20000248

08004594 <modbus_send_packet>:

// modbus串口发送一包数据
void modbus_send_packet(uint8_t *data, uint8_t len)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
	uart1_send_data(data, len);
 80045a0:	78fb      	ldrb	r3, [r7, #3]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa50 	bl	8004a4c <uart1_send_data>
}
 80045ac:	bf00      	nop
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <uart1_callback>:


void uart1_callback(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
	uint8_t res = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	71fb      	strb	r3, [r7, #7]
	res = uart1_Receive_one_byte();
 80045be:	f000 fa3b 	bl	8004a38 <uart1_Receive_one_byte>
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
	modbus.ReceiveBuff[modbus.ReceiveCount] = res;
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <uart1_callback+0x50>)
 80045c8:	7d5b      	ldrb	r3, [r3, #21]
 80045ca:	461a      	mov	r2, r3
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <uart1_callback+0x50>)
 80045ce:	4413      	add	r3, r2
 80045d0:	79fa      	ldrb	r2, [r7, #7]
 80045d2:	705a      	strb	r2, [r3, #1]
	modbus.ReceiveCount++;
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <uart1_callback+0x50>)
 80045d6:	7d5b      	ldrb	r3, [r3, #21]
 80045d8:	3301      	adds	r3, #1
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <uart1_callback+0x50>)
 80045de:	755a      	strb	r2, [r3, #21]
	if(modbus.ReceiveCount >=RX_SIZE)
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <uart1_callback+0x50>)
 80045e2:	7d5b      	ldrb	r3, [r3, #21]
 80045e4:	2b13      	cmp	r3, #19
 80045e6:	d902      	bls.n	80045ee <uart1_callback+0x3a>
	{
		modbus.ReceiveCount = 0;
 80045e8:	4b06      	ldr	r3, [pc, #24]	; (8004604 <uart1_callback+0x50>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	755a      	strb	r2, [r3, #21]
	}
	if (modbus.ReceiveCount == 1)
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <uart1_callback+0x50>)
 80045f0:	7d5b      	ldrb	r3, [r3, #21]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d102      	bne.n	80045fc <uart1_callback+0x48>
	{
		modbus.timerun = 1;
 80045f6:	4b03      	ldr	r3, [pc, #12]	; (8004604 <uart1_callback+0x50>)
 80045f8:	2201      	movs	r2, #1
 80045fa:	75da      	strb	r2, [r3, #23]
	}

}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000248 	.word	0x20000248

08004608 <modbus_timeout>:
void modbus_timeout(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	if (modbus.timerun == 1)
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <modbus_timeout+0x44>)
 800460e:	7ddb      	ldrb	r3, [r3, #23]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d105      	bne.n	8004620 <modbus_timeout+0x18>
	{
		modbus.timecount++;
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <modbus_timeout+0x44>)
 8004616:	7d9b      	ldrb	r3, [r3, #22]
 8004618:	3301      	adds	r3, #1
 800461a:	b2da      	uxtb	r2, r3
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <modbus_timeout+0x44>)
 800461e:	759a      	strb	r2, [r3, #22]
	}
	if (modbus.timecount >= 200) // 大于3.5个字符时间,接受到一包数据
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <modbus_timeout+0x44>)
 8004622:	7d9b      	ldrb	r3, [r3, #22]
 8004624:	2bc7      	cmp	r3, #199	; 0xc7
 8004626:	d90e      	bls.n	8004646 <modbus_timeout+0x3e>
	{
		modbus.timerun = 0;
 8004628:	4b08      	ldr	r3, [pc, #32]	; (800464c <modbus_timeout+0x44>)
 800462a:	2200      	movs	r2, #0
 800462c:	75da      	strb	r2, [r3, #23]
		modbus.timecount = 0;
 800462e:	4b07      	ldr	r3, [pc, #28]	; (800464c <modbus_timeout+0x44>)
 8004630:	2200      	movs	r2, #0
 8004632:	759a      	strb	r2, [r3, #22]
		modbus.ReceiveComplete = 1;
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <modbus_timeout+0x44>)
 8004636:	2201      	movs	r2, #1
 8004638:	761a      	strb	r2, [r3, #24]
		modbus_receive_packet(modbus.ReceiveBuff); //解析数据
 800463a:	4805      	ldr	r0, [pc, #20]	; (8004650 <modbus_timeout+0x48>)
 800463c:	f7ff ff16 	bl	800446c <modbus_receive_packet>
		modbus.ReceiveCount = 0;
 8004640:	4b02      	ldr	r3, [pc, #8]	; (800464c <modbus_timeout+0x44>)
 8004642:	2200      	movs	r2, #0
 8004644:	755a      	strb	r2, [r3, #21]
	//			modbus.ReceiveComplete = 0;
	}

}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000248 	.word	0x20000248
 8004650:	20000249 	.word	0x20000249

08004654 <modbus_init>:

void modbus_init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
	uint16_t flash_read[4] = {0x00, 0x00, 0x00, 0x00};
 800465a:	463b      	mov	r3, r7
 800465c:	2200      	movs	r2, #0
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	605a      	str	r2, [r3, #4]

	STMFLASH_Read(DEVICE_ADDR, flash_read, 1); // 读取modbus地址
 8004662:	463b      	mov	r3, r7
 8004664:	2201      	movs	r2, #1
 8004666:	4619      	mov	r1, r3
 8004668:	480a      	ldr	r0, [pc, #40]	; (8004694 <modbus_init+0x40>)
 800466a:	f000 f9b1 	bl	80049d0 <STMFLASH_Read>
	SPI_Delay_us(200);
 800466e:	20c8      	movs	r0, #200	; 0xc8
 8004670:	f7ff fb23 	bl	8003cba <SPI_Delay_us>
	modbus.Slave_addr = flash_read[0];
 8004674:	883b      	ldrh	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	4b07      	ldr	r3, [pc, #28]	; (8004698 <modbus_init+0x44>)
 800467a:	701a      	strb	r2, [r3, #0]
	if (flash_read[0] == 0xffff) // 初次上电
 800467c:	883b      	ldrh	r3, [r7, #0]
 800467e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004682:	4293      	cmp	r3, r2
 8004684:	d102      	bne.n	800468c <modbus_init+0x38>
	{
		modbus.Slave_addr = 1;
 8004686:	4b04      	ldr	r3, [pc, #16]	; (8004698 <modbus_init+0x44>)
 8004688:	2201      	movs	r2, #1
 800468a:	701a      	strb	r2, [r3, #0]
	}


}
 800468c:	bf00      	nop
 800468e:	3708      	adds	r7, #8
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	0801fc20 	.word	0x0801fc20
 8004698:	20000248 	.word	0x20000248

0800469c <set_modbus_address>:

void set_modbus_address(uint8_t addr)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
	uint16_t flash_write[2] = {0x00, 0x00};
 80046a6:	2300      	movs	r3, #0
 80046a8:	81bb      	strh	r3, [r7, #12]
 80046aa:	2300      	movs	r3, #0
 80046ac:	81fb      	strh	r3, [r7, #14]

	flash_write[0] = (uint16_t)(addr);
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	81bb      	strh	r3, [r7, #12]
	STMFLASH_Write(DEVICE_ADDR, flash_write, 1);
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	2201      	movs	r2, #1
 80046ba:	4619      	mov	r1, r3
 80046bc:	4803      	ldr	r0, [pc, #12]	; (80046cc <set_modbus_address+0x30>)
 80046be:	f000 f85d 	bl	800477c <STMFLASH_Write>


}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	0801fc20 	.word	0x0801fc20

080046d0 <STMFLASH_ReadHalfWord>:
#include "flash.h"

uint16_t STMFLASH_ReadHalfWord(uint32_t faddr)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
	return *(__IO uint16_t *)faddr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	b29b      	uxth	r3, r3
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <STMFLASH_Write_NoCheck>:

void STMFLASH_Write_NoCheck(uint32_t WriteAddr, uint16_t *pBuffer, uint16_t NumToWrite)
{
 80046e8:	b5b0      	push	{r4, r5, r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < NumToWrite; i++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	82fb      	strh	r3, [r7, #22]
 80046fa:	e014      	b.n	8004726 <STMFLASH_Write_NoCheck+0x3e>
	{
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, WriteAddr, pBuffer[i]);
 80046fc:	8afb      	ldrh	r3, [r7, #22]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	4413      	add	r3, r2
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	2200      	movs	r2, #0
 800470a:	461c      	mov	r4, r3
 800470c:	4615      	mov	r5, r2
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	2001      	movs	r0, #1
 8004716:	f7fc fd9d 	bl	8001254 <HAL_FLASH_Program>
		WriteAddr += 2;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3302      	adds	r3, #2
 800471e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < NumToWrite; i++)
 8004720:	8afb      	ldrh	r3, [r7, #22]
 8004722:	3301      	adds	r3, #1
 8004724:	82fb      	strh	r3, [r7, #22]
 8004726:	8afa      	ldrh	r2, [r7, #22]
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	429a      	cmp	r2, r3
 800472c:	d3e6      	bcc.n	80046fc <STMFLASH_Write_NoCheck+0x14>
	}
}
 800472e:	bf00      	nop
 8004730:	bf00      	nop
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bdb0      	pop	{r4, r5, r7, pc}

08004738 <FLASH_ErasePage>:
 @param pageAddress -[in] 擦除的起始地址
 @param nbPages -[in] 擦除页数
 @return 0 - 成功；-1 - 失败
*/
int FLASH_ErasePage(uint32_t pageAddress, uint32_t nbPages)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
	uint32_t pageError = 0;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef eraseInit;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
	eraseInit.PageAddress = pageAddress;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	617b      	str	r3, [r7, #20]
	eraseInit.Banks = FLASH_BANK_1;
 800474e:	2301      	movs	r3, #1
 8004750:	613b      	str	r3, [r7, #16]
	eraseInit.NbPages = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
	if (HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK)
 8004756:	f107 021c 	add.w	r2, r7, #28
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f7fc fecf 	bl	8001504 <HAL_FLASHEx_Erase>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d002      	beq.n	8004772 <FLASH_ErasePage+0x3a>
	{
		return -1;
 800476c:	f04f 33ff 	mov.w	r3, #4294967295
 8004770:	e000      	b.n	8004774 <FLASH_ErasePage+0x3c>
	}
	return 0;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <STMFLASH_Write>:

void STMFLASH_Write(uint32_t WriteAddr, uint16_t *pBuffer, uint16_t NumToWrite)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 8004782:	af00      	add	r7, sp, #0
 8004784:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004788:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 800478c:	6018      	str	r0, [r3, #0]
 800478e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004792:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 8004796:	6019      	str	r1, [r3, #0]
 8004798:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800479c:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 80047a0:	801a      	strh	r2, [r3, #0]
	uint32_t secpos;
	uint16_t secoff;
	uint16_t secremain;
	uint16_t i;
	uint32_t offaddr;
	if (WriteAddr < STM32_FLASH_BASE || (WriteAddr >= (STM32_FLASH_BASE + 1024 * STM32_FLASH_SIZE)))
 80047a2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80047a6:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047b0:	f0c0 8107 	bcc.w	80049c2 <STMFLASH_Write+0x246>
 80047b4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80047b8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a83      	ldr	r2, [pc, #524]	; (80049cc <STMFLASH_Write+0x250>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	f200 80fe 	bhi.w	80049c2 <STMFLASH_Write+0x246>
		return;
	HAL_FLASH_Unlock();
 80047c6:	f7fc fdb5 	bl	8001334 <HAL_FLASH_Unlock>
	offaddr = WriteAddr - USER_FLASH_ADDR_START;
 80047ca:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80047ce:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80047d8:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 80047dc:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	secpos = offaddr / STM_SECTOR_SIZE;
 80047e0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80047e4:	0a9b      	lsrs	r3, r3, #10
 80047e6:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
	secoff = (offaddr % STM_SECTOR_SIZE) / 2;
 80047ea:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80047ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
	secremain = STM_SECTOR_SIZE / 2 - secoff;
 80047f8:	f8b7 341a 	ldrh.w	r3, [r7, #1050]	; 0x41a
 80047fc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004800:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
	if (NumToWrite <= secremain)
 8004804:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004808:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800480c:	881a      	ldrh	r2, [r3, #0]
 800480e:	f8b7 3418 	ldrh.w	r3, [r7, #1048]	; 0x418
 8004812:	429a      	cmp	r2, r3
 8004814:	d806      	bhi.n	8004824 <STMFLASH_Write+0xa8>
		secremain = NumToWrite;
 8004816:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800481a:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
	while (1)
	{
		STMFLASH_Read(secpos * STM_SECTOR_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, STM_SECTOR_SIZE / 2);
 8004824:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8004828:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800482c:	337f      	adds	r3, #127	; 0x7f
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	f107 0110 	add.w	r1, r7, #16
 8004834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004838:	4618      	mov	r0, r3
 800483a:	f000 f8c9 	bl	80049d0 <STMFLASH_Read>
		for (i = 0; i < secremain; i++)
 800483e:	2300      	movs	r3, #0
 8004840:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 8004844:	e013      	b.n	800486e <STMFLASH_Write+0xf2>
		{
			if (STMFLASH_BUF[secoff + i] != 0XFFFF)
 8004846:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 800484a:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 800484e:	441a      	add	r2, r3
 8004850:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004854:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004858:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800485c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004860:	4293      	cmp	r3, r2
 8004862:	d10b      	bne.n	800487c <STMFLASH_Write+0x100>
		for (i = 0; i < secremain; i++)
 8004864:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 8004868:	3301      	adds	r3, #1
 800486a:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 800486e:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8004872:	f8b7 3418 	ldrh.w	r3, [r7, #1048]	; 0x418
 8004876:	429a      	cmp	r2, r3
 8004878:	d3e5      	bcc.n	8004846 <STMFLASH_Write+0xca>
 800487a:	e000      	b.n	800487e <STMFLASH_Write+0x102>
				break;
 800487c:	bf00      	nop
		}
		if (i < secremain)
 800487e:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 8004882:	f8b7 3418 	ldrh.w	r3, [r7, #1048]	; 0x418
 8004886:	429a      	cmp	r2, r3
 8004888:	d23b      	bcs.n	8004902 <STMFLASH_Write+0x186>
		{
			FLASH_ErasePage(secpos * STM_SECTOR_SIZE + USER_FLASH_ADDR_START, 1);
 800488a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800488e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004892:	337f      	adds	r3, #127	; 0x7f
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff ff4d 	bl	8004738 <FLASH_ErasePage>
			for (i = 0; i < secremain; i++)
 800489e:	2300      	movs	r3, #0
 80048a0:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 80048a4:	e019      	b.n	80048da <STMFLASH_Write+0x15e>
			{
				STMFLASH_BUF[i + secoff] = pBuffer[i];
 80048a6:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 80048b0:	f5a2 6283 	sub.w	r2, r2, #1048	; 0x418
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	4413      	add	r3, r2
 80048b8:	f8b7 1416 	ldrh.w	r1, [r7, #1046]	; 0x416
 80048bc:	f8b7 241a 	ldrh.w	r2, [r7, #1050]	; 0x41a
 80048c0:	440a      	add	r2, r1
 80048c2:	8819      	ldrh	r1, [r3, #0]
 80048c4:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80048c8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80048cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < secremain; i++)
 80048d0:	f8b7 3416 	ldrh.w	r3, [r7, #1046]	; 0x416
 80048d4:	3301      	adds	r3, #1
 80048d6:	f8a7 3416 	strh.w	r3, [r7, #1046]	; 0x416
 80048da:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	; 0x416
 80048de:	f8b7 3418 	ldrh.w	r3, [r7, #1048]	; 0x418
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d3df      	bcc.n	80048a6 <STMFLASH_Write+0x12a>
			}
			STMFLASH_Write_NoCheck(secpos * STM_SECTOR_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, STM_SECTOR_SIZE / 2);
 80048e6:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80048ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048ee:	337f      	adds	r3, #127	; 0x7f
 80048f0:	029b      	lsls	r3, r3, #10
 80048f2:	f107 0110 	add.w	r1, r7, #16
 80048f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fef4 	bl	80046e8 <STMFLASH_Write_NoCheck>
 8004900:	e00d      	b.n	800491e <STMFLASH_Write+0x1a2>
		}
		else
			STMFLASH_Write_NoCheck(WriteAddr, pBuffer, secremain);
 8004902:	f8b7 2418 	ldrh.w	r2, [r7, #1048]	; 0x418
 8004906:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800490a:	f5a3 6183 	sub.w	r1, r3, #1048	; 0x418
 800490e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004912:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8004916:	6809      	ldr	r1, [r1, #0]
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	f7ff fee5 	bl	80046e8 <STMFLASH_Write_NoCheck>
		if (NumToWrite == secremain)
 800491e:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004922:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8004926:	881a      	ldrh	r2, [r3, #0]
 8004928:	f8b7 3418 	ldrh.w	r3, [r7, #1048]	; 0x418
 800492c:	429a      	cmp	r2, r3
 800492e:	d044      	beq.n	80049ba <STMFLASH_Write+0x23e>
			break;
		else
		{
			secpos++;
 8004930:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8004934:	3301      	adds	r3, #1
 8004936:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
			secoff = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	f8a7 341a 	strh.w	r3, [r7, #1050]	; 0x41a
			pBuffer += secremain;
 8004940:	f8b7 3418 	ldrh.w	r3, [r7, #1048]	; 0x418
 8004944:	005a      	lsls	r2, r3, #1
 8004946:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800494a:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 800494e:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8004952:	f5a1 6183 	sub.w	r1, r1, #1048	; 0x418
 8004956:	6809      	ldr	r1, [r1, #0]
 8004958:	440a      	add	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
			WriteAddr += secremain;
 800495c:	f8b7 2418 	ldrh.w	r2, [r7, #1048]	; 0x418
 8004960:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004964:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8004968:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 800496c:	f2a1 4114 	subw	r1, r1, #1044	; 0x414
 8004970:	6809      	ldr	r1, [r1, #0]
 8004972:	440a      	add	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
			NumToWrite -= secremain;
 8004976:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800497a:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 800497e:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004982:	f2a2 421a 	subw	r2, r2, #1050	; 0x41a
 8004986:	8811      	ldrh	r1, [r2, #0]
 8004988:	f8b7 2418 	ldrh.w	r2, [r7, #1048]	; 0x418
 800498c:	1a8a      	subs	r2, r1, r2
 800498e:	801a      	strh	r2, [r3, #0]
			if (NumToWrite > (STM_SECTOR_SIZE / 2))
 8004990:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8004994:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499e:	d904      	bls.n	80049aa <STMFLASH_Write+0x22e>
				secremain = STM_SECTOR_SIZE / 2;
 80049a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049a4:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
 80049a8:	e73c      	b.n	8004824 <STMFLASH_Write+0xa8>
			else
				secremain = NumToWrite;
 80049aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80049ae:	f2a3 431a 	subw	r3, r3, #1050	; 0x41a
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	f8a7 3418 	strh.w	r3, [r7, #1048]	; 0x418
		STMFLASH_Read(secpos * STM_SECTOR_SIZE + USER_FLASH_ADDR_START, STMFLASH_BUF, STM_SECTOR_SIZE / 2);
 80049b8:	e734      	b.n	8004824 <STMFLASH_Write+0xa8>
			break;
 80049ba:	bf00      	nop
		}
	};
	HAL_FLASH_Lock();
 80049bc:	f7fc fce0 	bl	8001380 <HAL_FLASH_Lock>
 80049c0:	e000      	b.n	80049c4 <STMFLASH_Write+0x248>
		return;
 80049c2:	bf00      	nop
}
 80049c4:	f507 6784 	add.w	r7, r7, #1056	; 0x420
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	0801ffff 	.word	0x0801ffff

080049d0 <STMFLASH_Read>:

void STMFLASH_Read(uint32_t ReadAddr, uint16_t *pBuffer, uint16_t NumToRead)
{
 80049d0:	b590      	push	{r4, r7, lr}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	4613      	mov	r3, r2
 80049dc:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < NumToRead; i++)
 80049de:	2300      	movs	r3, #0
 80049e0:	82fb      	strh	r3, [r7, #22]
 80049e2:	e00e      	b.n	8004a02 <STMFLASH_Read+0x32>
	{
		pBuffer[i] = STMFLASH_ReadHalfWord(ReadAddr);
 80049e4:	8afb      	ldrh	r3, [r7, #22]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	18d4      	adds	r4, r2, r3
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff fe6f 	bl	80046d0 <STMFLASH_ReadHalfWord>
 80049f2:	4603      	mov	r3, r0
 80049f4:	8023      	strh	r3, [r4, #0]
		ReadAddr += 2;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3302      	adds	r3, #2
 80049fa:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < NumToRead; i++)
 80049fc:	8afb      	ldrh	r3, [r7, #22]
 80049fe:	3301      	adds	r3, #1
 8004a00:	82fb      	strh	r3, [r7, #22]
 8004a02:	8afa      	ldrh	r2, [r7, #22]
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d3ec      	bcc.n	80049e4 <STMFLASH_Read+0x14>
	}
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	371c      	adds	r7, #28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd90      	pop	{r4, r7, pc}

08004a14 <modbus_uart_init>:
  return len;
}

//串口初始化
void modbus_uart_init(void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0

//  HAL_UART_Transmit_IT(&huart1, (uint8_t *)StaMessages, sizeof(StaMessages));
  HAL_UART_Receive_IT(&huart1, (uint8_t *)RxBuffer, 1); // 调用中断接收函数，接收长度设为1，接收一个字节进一次中断
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4904      	ldr	r1, [pc, #16]	; (8004a2c <modbus_uart_init+0x18>)
 8004a1c:	4804      	ldr	r0, [pc, #16]	; (8004a30 <modbus_uart_init+0x1c>)
 8004a1e:	f7fe f8c6 	bl	8002bae <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8004a22:	4804      	ldr	r0, [pc, #16]	; (8004a34 <modbus_uart_init+0x20>)
 8004a24:	f7fd fc42 	bl	80022ac <HAL_TIM_Base_Start_IT>
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20000270 	.word	0x20000270
 8004a30:	200000bc 	.word	0x200000bc
 8004a34:	2000002c 	.word	0x2000002c

08004a38 <uart1_Receive_one_byte>:


}

uint8_t uart1_Receive_one_byte(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
	return RxBuffer[0];
 8004a3c:	4b02      	ldr	r3, [pc, #8]	; (8004a48 <uart1_Receive_one_byte+0x10>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bc80      	pop	{r7}
 8004a46:	4770      	bx	lr
 8004a48:	20000270 	.word	0x20000270

08004a4c <uart1_send_data>:



void uart1_send_data(uint8_t *data, uint16_t len)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart1, data, len, 100); // 发送数据
 8004a58:	887a      	ldrh	r2, [r7, #2]
 8004a5a:	2364      	movs	r3, #100	; 0x64
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4803      	ldr	r0, [pc, #12]	; (8004a6c <uart1_send_data+0x20>)
 8004a60:	f7fe f822 	bl	8002aa8 <HAL_UART_Transmit>
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200000bc 	.word	0x200000bc

08004a70 <XOR_Check>:
}



uint8_t XOR_Check(uint8_t *bufpt, uint8_t num)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	70fb      	strb	r3, [r7, #3]
    uint8_t i;
    uint8_t temp;
    temp = *bufpt++;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	73bb      	strb	r3, [r7, #14]
    for (i = 1; i < num; i++)
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	e009      	b.n	8004aa0 <XOR_Check+0x30>
    {
        temp = temp ^ *bufpt++;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	781a      	ldrb	r2, [r3, #0]
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	4053      	eors	r3, r2
 8004a98:	73bb      	strb	r3, [r7, #14]
    for (i = 1; i < num; i++)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	73fb      	strb	r3, [r7, #15]
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d3f1      	bcc.n	8004a8c <XOR_Check+0x1c>
    }

    return temp;
 8004aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr

08004ab4 <ble_Message_analysis>:
/**
 * @brief 串口数据接收
 *
 */
void ble_Message_analysis(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
    if (ble_uart.RxBuf[0] == 0xAA)
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004aba:	7a1b      	ldrb	r3, [r3, #8]
 8004abc:	2baa      	cmp	r3, #170	; 0xaa
 8004abe:	d148      	bne.n	8004b52 <ble_Message_analysis+0x9e>
    {
        if (ble_uart.RxCnt == 4)
 8004ac0:	4b29      	ldr	r3, [pc, #164]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004ac2:	885b      	ldrh	r3, [r3, #2]
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	d104      	bne.n	8004ad2 <ble_Message_analysis+0x1e>
        {
        	ble_uart.RxNum = ble_uart.RxBuf[3];
 8004ac8:	4b27      	ldr	r3, [pc, #156]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004aca:	7adb      	ldrb	r3, [r3, #11]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004ad0:	80da      	strh	r2, [r3, #6]
        }
        if (((ble_uart.RxNum > Uart_Rx_MaxSize) || (ble_uart.RxNum < 7) || (ble_uart.RxCnt > ble_uart.RxNum)) && (ble_uart.RxCnt > 4))
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004ad4:	88db      	ldrh	r3, [r3, #6]
 8004ad6:	2b14      	cmp	r3, #20
 8004ad8:	d809      	bhi.n	8004aee <ble_Message_analysis+0x3a>
 8004ada:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004adc:	88db      	ldrh	r3, [r3, #6]
 8004ade:	2b06      	cmp	r3, #6
 8004ae0:	d905      	bls.n	8004aee <ble_Message_analysis+0x3a>
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004ae4:	885a      	ldrh	r2, [r3, #2]
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004ae8:	88db      	ldrh	r3, [r3, #6]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d90d      	bls.n	8004b0a <ble_Message_analysis+0x56>
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004af0:	885b      	ldrh	r3, [r3, #2]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d909      	bls.n	8004b0a <ble_Message_analysis+0x56>
        {
        	ble_uart.RxCnt = 0;
 8004af6:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	805a      	strh	r2, [r3, #2]
        	ble_uart.RxNum = 0;
 8004afc:	4b1a      	ldr	r3, [pc, #104]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	80da      	strh	r2, [r3, #6]
        	ble_uart.RxState = 0;
 8004b02:	4b19      	ldr	r3, [pc, #100]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
    	ble_uart.RxCnt = 0;
    	ble_uart.RxNum = 0;
    	ble_uart.RxState = 0;
//    	ble_uart.valid = 0;
    }
}
 8004b08:	e02c      	b.n	8004b64 <ble_Message_analysis+0xb0>
        else if (ble_uart.RxNum == ble_uart.RxCnt)
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b0c:	88da      	ldrh	r2, [r3, #6]
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b10:	885b      	ldrh	r3, [r3, #2]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d126      	bne.n	8004b64 <ble_Message_analysis+0xb0>
            if (XOR_Check(ble_uart.RxBuf, ble_uart.RxNum) == 0)
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b18:	88db      	ldrh	r3, [r3, #6]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4813      	ldr	r0, [pc, #76]	; (8004b6c <ble_Message_analysis+0xb8>)
 8004b20:	f7ff ffa6 	bl	8004a70 <XOR_Check>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <ble_Message_analysis+0x8a>
            	ble_uart.RxState = 1;
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	701a      	strb	r2, [r3, #0]
            	ble_uart.RxCnt = 0;
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	805a      	strh	r2, [r3, #2]
            	ble_uart.RxNum = 0;
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	80da      	strh	r2, [r3, #6]
}
 8004b3c:	e012      	b.n	8004b64 <ble_Message_analysis+0xb0>
            	ble_uart.RxCnt = 0;
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	805a      	strh	r2, [r3, #2]
            	ble_uart.RxNum = 0;
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	80da      	strh	r2, [r3, #6]
            	ble_uart.RxState = 0;
 8004b4a:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
}
 8004b50:	e008      	b.n	8004b64 <ble_Message_analysis+0xb0>
    	ble_uart.RxCnt = 0;
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	805a      	strh	r2, [r3, #2]
    	ble_uart.RxNum = 0;
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	80da      	strh	r2, [r3, #6]
    	ble_uart.RxState = 0;
 8004b5e:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <ble_Message_analysis+0xb4>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	701a      	strb	r2, [r3, #0]
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	2000027c 	.word	0x2000027c
 8004b6c:	20000284 	.word	0x20000284

08004b70 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <HAL_UART_RxCpltCallback+0x58>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d106      	bne.n	8004b90 <HAL_UART_RxCpltCallback+0x20>
	{
		  UNUSED(huart);
		  HAL_UART_Receive_IT(&huart1, (uint8_t *)RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 8004b82:	2201      	movs	r2, #1
 8004b84:	4911      	ldr	r1, [pc, #68]	; (8004bcc <HAL_UART_RxCpltCallback+0x5c>)
 8004b86:	4812      	ldr	r0, [pc, #72]	; (8004bd0 <HAL_UART_RxCpltCallback+0x60>)
 8004b88:	f7fe f811 	bl	8002bae <HAL_UART_Receive_IT>
		  uart1_callback();
 8004b8c:	f7ff fd12 	bl	80045b4 <uart1_callback>
	}
	if(huart->Instance == USART3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <HAL_UART_RxCpltCallback+0x64>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d112      	bne.n	8004bc0 <HAL_UART_RxCpltCallback+0x50>
	{
		HAL_UART_Receive_IT(&huart3, (uint8_t *)uart_RxBuffer, 1);       // 再开启接收中断（因为里面中断只会触发一次，因此需要再次开启）
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	490e      	ldr	r1, [pc, #56]	; (8004bd8 <HAL_UART_RxCpltCallback+0x68>)
 8004b9e:	480f      	ldr	r0, [pc, #60]	; (8004bdc <HAL_UART_RxCpltCallback+0x6c>)
 8004ba0:	f7fe f805 	bl	8002bae <HAL_UART_Receive_IT>
		ble_uart.RxBuf[ble_uart.RxCnt++] = uart_RxBuffer[0];//
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <HAL_UART_RxCpltCallback+0x70>)
 8004ba6:	885b      	ldrh	r3, [r3, #2]
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	b291      	uxth	r1, r2
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <HAL_UART_RxCpltCallback+0x70>)
 8004bae:	8051      	strh	r1, [r2, #2]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <HAL_UART_RxCpltCallback+0x68>)
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <HAL_UART_RxCpltCallback+0x70>)
 8004bb8:	440b      	add	r3, r1
 8004bba:	721a      	strb	r2, [r3, #8]
		ble_Message_analysis();
 8004bbc:	f7ff ff7a 	bl	8004ab4 <ble_Message_analysis>
	}

}
 8004bc0:	bf00      	nop
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40013800 	.word	0x40013800
 8004bcc:	20000270 	.word	0x20000270
 8004bd0:	200000bc 	.word	0x200000bc
 8004bd4:	40004800 	.word	0x40004800
 8004bd8:	200002ac 	.word	0x200002ac
 8004bdc:	20000104 	.word	0x20000104
 8004be0:	2000027c 	.word	0x2000027c

08004be4 <memset>:
 8004be4:	4603      	mov	r3, r0
 8004be6:	4402      	add	r2, r0
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d100      	bne.n	8004bee <memset+0xa>
 8004bec:	4770      	bx	lr
 8004bee:	f803 1b01 	strb.w	r1, [r3], #1
 8004bf2:	e7f9      	b.n	8004be8 <memset+0x4>

08004bf4 <__libc_init_array>:
 8004bf4:	b570      	push	{r4, r5, r6, lr}
 8004bf6:	2600      	movs	r6, #0
 8004bf8:	4d0c      	ldr	r5, [pc, #48]	; (8004c2c <__libc_init_array+0x38>)
 8004bfa:	4c0d      	ldr	r4, [pc, #52]	; (8004c30 <__libc_init_array+0x3c>)
 8004bfc:	1b64      	subs	r4, r4, r5
 8004bfe:	10a4      	asrs	r4, r4, #2
 8004c00:	42a6      	cmp	r6, r4
 8004c02:	d109      	bne.n	8004c18 <__libc_init_array+0x24>
 8004c04:	f000 f81a 	bl	8004c3c <_init>
 8004c08:	2600      	movs	r6, #0
 8004c0a:	4d0a      	ldr	r5, [pc, #40]	; (8004c34 <__libc_init_array+0x40>)
 8004c0c:	4c0a      	ldr	r4, [pc, #40]	; (8004c38 <__libc_init_array+0x44>)
 8004c0e:	1b64      	subs	r4, r4, r5
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	42a6      	cmp	r6, r4
 8004c14:	d105      	bne.n	8004c22 <__libc_init_array+0x2e>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c1c:	4798      	blx	r3
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7ee      	b.n	8004c00 <__libc_init_array+0xc>
 8004c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c26:	4798      	blx	r3
 8004c28:	3601      	adds	r6, #1
 8004c2a:	e7f2      	b.n	8004c12 <__libc_init_array+0x1e>
 8004c2c:	08004c80 	.word	0x08004c80
 8004c30:	08004c80 	.word	0x08004c80
 8004c34:	08004c80 	.word	0x08004c80
 8004c38:	08004c84 	.word	0x08004c84

08004c3c <_init>:
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	bf00      	nop
 8004c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c42:	bc08      	pop	{r3}
 8004c44:	469e      	mov	lr, r3
 8004c46:	4770      	bx	lr

08004c48 <_fini>:
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	bf00      	nop
 8004c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c4e:	bc08      	pop	{r3}
 8004c50:	469e      	mov	lr, r3
 8004c52:	4770      	bx	lr
